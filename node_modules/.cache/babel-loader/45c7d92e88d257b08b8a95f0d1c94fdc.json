{"ast":null,"code":"var _jsxFileName = \"/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/pathfinder/setup/make_grid.js\";\nimport React, { Component } from 'react';\nimport Cell from './cell/cell';\nimport './make_grid.css';\nimport Bfs from '../algorithms/path_algs/bfs';\nimport Dfs from '../algorithms/path_algs/dfs';\nimport greedy from '../algorithms/path_algs/greedy';\nimport astar from '../algorithms/path_algs/astar';\nimport dijkstra from '../algorithms/path_algs/dijkstra';\nimport './cell/cell.css';\nimport random_maze from '../algorithms/maze_algs/random_maze';\nimport random_kruskal from '../algorithms/maze_algs/random_kruskal';\nimport random_prims from '../algorithms/maze_algs/random_prims';\nimport wilson from '../algorithms/maze_algs/wilson';\nimport './global';\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst row_count = global.rc; // TODO: allow for user to input these values\n\nconst col_count = global.cc;\nlet start_i = 15;\nlet start_j = 20;\nlet end_i = 15;\nlet end_j = 30; // for now, create walls that are hard coded and then color them in\n\nlet walls = [];\nexport default class make_grid extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      start_end: 0 // keeps track of start (0) or end (1)\n\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n    this.startEnd = this.startEnd.bind(this);\n    this.createWall = this.createWall.bind(this);\n    this.reset = this.reset.bind(this);\n    this.make_maze = this.make_maze.bind(this);\n    this.dark_maze = this.dark_maze.bind(this);\n  }\n  /************************** General Use Methods **************************/\n  // create a cell\n\n\n  create_cell() {\n    const cell = {\n      type: \"\",\n      weight: 1\n    };\n    return cell;\n  }\n  /************************* Pathfinding Methods *************************/\n  // runs bfs and returns the nodes visited path and backtrack path\n\n\n  handleSearch(start_i, start_j, end_i, end_j, walls, algorithm) {\n    for (let i = 0; i < walls.length; i++) {\n      walls[i] = walls[i].toString();\n    }\n\n    let walls_unique = Array.from(new Set(walls)); // run bfs\n\n    let ret;\n\n    switch (algorithm) {\n      case \"bfs\":\n        // console.log(start_i, \" \", start_j)\n        ret = Bfs(start_i, start_j, end_i, end_j, walls_unique);\n        break;\n\n      case \"dfs\":\n        // console.log(\"dfs switch case\")\n        ret = Dfs(start_i, start_j, end_i, end_j, walls_unique);\n        break;\n\n      case \"greedy\":\n        // console.log(\"greedy\")\n        ret = greedy(start_i, start_j, end_i, end_j, walls_unique);\n        break;\n\n      case \"astar\":\n        ret = astar(start_i, start_j, end_i, end_j, walls_unique);\n        break;\n\n      case \"dijkstra\":\n        ret = dijkstra(start_i, start_j, end_i, end_j, walls_unique);\n        break;\n    }\n\n    this.reset_paths();\n    let wait_time = this.animate_pathfind(ret); // console.log(wait_time)\n\n    if (ret[ret.length - 1][0][0] != undefined) {\n      // console.log(algorithm, \" \", ret[ret.length-1].length)\n      setTimeout(() => {\n        this.animate_backtrack(ret[ret.length - 1]);\n      }, wait_time);\n    }\n  }\n  /************************* Animation Methods *************************/\n  // pathfinding animation\n\n\n  animate_pathfind(path) {\n    // length is path - 1 because the last element of the input is the array for backtrack steps\n    for (let i = 0; i < path.length - 1; i++) {\n      let x = path[i][0];\n      let y = path[i][1];\n      const str = 'cell-' + x + '-' + y;\n\n      if (document.getElementById(str).className == 'cell cell-start') {\n        // if (x == start_i && y == start_j) {\n        // document.getElementById(str).className = 'cell cell-start'\n        continue;\n      }\n\n      if (document.getElementById(str).className == 'cell cell-finish') {\n        // if (x == end_i && y == end_j) {\n        // document.getElementById(str).className = 'cell cell-finish'\n        continue;\n      } // if (x == 15 && y == 20 || x == 15 && y==30) {\n      // \tconsole.log(\"debugging \", document.getElementById(str).className)\n      // }\n      // if (document.getElementById(str).className== 'cell ') {\n      // for some reason, having a console.log makes the color change, but not having this doesnt\n      // if (x == 15 && y == 20 || x == 15 && y==30) {\n      // \tconsole.log(\"debugging \", document.getElementById(str).className, \" \", x, \" \", y)\n      // }\n\n\n      setTimeout(() => {\n        document.getElementById(str).className = 'cell cell-visited'; // this.animate_backtrack(path[ path.length - 1])\n      }, 10 * i); // }\n    }\n\n    return 10 * path.length;\n  } // backtrack animation\n\n\n  animate_backtrack(path) {\n    for (let i = 0; i < path.length; i++) {\n      let x = path[i][0];\n      let y = path[i][1];\n\n      if (x == start_i && y == start_j) {\n        continue;\n      }\n\n      if (x == end_i && y == end_j) {\n        continue;\n      } // console.log(x, y)\n\n\n      const str = 'cell-' + x + '-' + y;\n      setTimeout(() => {\n        document.getElementById(str).className = 'cell cell-backtrack';\n      }, 50 * i);\n    }\n  }\n\n  animate_maze() {\n    for (let i = 0; i < walls.length; i++) {\n      const str = 'cell-' + walls[i][0] + '-' + walls[i][1];\n      setTimeout(() => {\n        document.getElementById(str).className = 'cell cell-wall';\n      }, 5 * i);\n    }\n  }\n\n  dark_animate_maze(maze) {\n    for (let i = 0; i < maze.length; i++) {\n      const str = 'cell-' + maze[i][0] + '-' + maze[i][1];\n      setTimeout(() => {\n        document.getElementById(str).className = 'cell ';\n      }, 5 * i);\n    }\n  }\n  /****************************** Generate Walls *************************/\n\n\n  createWall(event) {\n    if (event.shiftKey) {\n      const {\n        id\n      } = event.currentTarget; // row and col are not returned for this\n\n      let r = parseInt(document.getElementById(id).getAttribute(\"row\"));\n      let c = parseInt(document.getElementById(id).getAttribute(\"col\"));\n      document.getElementById(id).className = 'cell cell-wall';\n      let a = id.split(\"-\")[1];\n      let b = id.split(\"-\")[2]; // console.log(a,b)\n\n      walls.push([a, b]);\n    }\n  }\n\n  make_maze() {\n    this.reset();\n    walls = random_maze();\n    this.animate_maze();\n  }\n\n  dark_maze(maze_type) {\n    let out;\n    this.darken();\n\n    switch (maze_type) {\n      case \"kruskal\":\n        out = random_kruskal();\n        break;\n\n      case \"prim\":\n        out = random_prims();\n        break;\n\n      case \"wilson\":\n        out = wilson();\n        break;\n    }\n\n    walls = out.walls;\n    this.dark_animate_maze(out.maze);\n  }\n  /****************************** Mouse Click Methods *************************/\n\n\n  startEnd(event) {\n    // TODO;\n    // disallow clicking of walls\n    const {\n      id\n    } = event.currentTarget; // row and col are not returned for this\n\n    let r = parseInt(document.getElementById(id).getAttribute(\"row\"));\n    let c = parseInt(document.getElementById(id).getAttribute(\"col\"));\n\n    if (this.state.start_end == 0) {\n      // reset the start colors\n      document.getElementById('cell-' + start_i + '-' + start_j).className = 'cell ';\n      document.getElementById(id).className = 'cell cell-start';\n      this.setState({\n        start_end: 1\n      });\n      start_i = r;\n      start_j = c;\n    } else {\n      document.getElementById('cell-' + end_i + '-' + end_j).className = 'cell ';\n      document.getElementById(id).className = 'cell cell-finish';\n      this.setState({\n        start_end: 0\n      });\n      end_i = r;\n      end_j = c;\n    }\n  } // darkens the entire grid\n\n\n  darken() {\n    for (let i = 0; i < row_count; i++) {\n      for (let j = 0; j < col_count; j++) {\n        let id = 'cell-' + i + '-' + j;\n        document.getElementById(id).className = 'cell cell-wall';\n      }\n    }\n  } // clears the entire grid\n\n\n  reset() {\n    for (let i = 0; i < row_count; i++) {\n      for (let j = 0; j < col_count; j++) {\n        let id = 'cell-' + i + '-' + j;\n        document.getElementById(id).className = 'cell ';\n      }\n    }\n  } // keeps the walls; resets the path colors\n\n\n  reset_paths() {\n    for (let i = 0; i < row_count; i++) {\n      for (let j = 0; j < col_count; j++) {\n        let id = 'cell-' + i + '-' + j;\n\n        if (document.getElementById(id).className == 'cell cell-visited' || document.getElementById(id).className == 'cell cell-backtrack') {\n          document.getElementById(id).className = 'cell ';\n        }\n      }\n    }\n  }\n  /****************************** Rendering *************************/\n\n\n  render() {\n    // setup for grid\n    let grid = [];\n\n    for (let i = 0; i < row_count; i++) {\n      let temp = [];\n\n      for (let j = 0; j < col_count; j++) {\n        temp.push(0);\n      }\n\n      grid.push(temp);\n    }\n\n    let maze_list = [\"kruskal\", \"prim\", \"wilson\"];\n    let alg_list = [\"bfs\", \"dfs\", \"greedy\", \"astar\", \"dijkstra\"];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 5\n      }\n    }, grid.map((row, row_index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 8\n        }\n      }, row.map((col, col_index) => {\n        const cell = this.create_cell();\n        let {\n          type,\n          weight\n        } = cell;\n\n        if (row_index == start_i && col_index == start_j) {\n          type = 'cell-start';\n        } else if (row_index == end_i && col_index == end_j) {\n          type = 'cell-finish';\n        }\n\n        return /*#__PURE__*/React.createElement(Cell, {\n          element_id: 'cell-' + row_index + '-' + col_index,\n          type: type,\n          weight: weight,\n          row: row_index,\n          col: col_index,\n          onMouseMove: this.createWall,\n          onClick: this.startEnd,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 5\n      }\n    }, \"\\\" \\\"\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"pathfinder-dropdown\",\n      class: \"row text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-secondary dropdown-toggle\",\n      className: \"algorithms-button\",\n      type: \"button\",\n      id: \"dropdownMenuButton\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    }, \"Select Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-menu\",\n      \"aria-labelledby\": \"dropdownMenuButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }\n    }, alg_list.map(alg => {\n      // console.log(typeof(alg))\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        class: \"dropdown-item\",\n        className: \"algorithms-menu\",\n        onClick: () => this.handleSearch(start_i, start_j, end_i, end_j, walls, alg),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }\n      }, \"Visualize \", alg), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"dropdown-divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }\n      }));\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      class: \"btn btn-outline-secondary\",\n      className: \"btn-xlarge\",\n      id: \"reset button\",\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 8\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-secondary dropdown-toggle\",\n      className: \"maze-button\",\n      type: \"button\",\n      id: \"dropdownMenuButton\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 10\n      }\n    }, \"Select Maze\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-menu\",\n      \"aria-labelledby\": \"dropdownMenuButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      class: \"dropdown-item\",\n      className: \"maze-menu\",\n      onClick: this.make_maze,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 12\n      }\n    }, \"General Maze\"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropdown-divider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 12\n      }\n    })), maze_list.map(maze => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        class: \"dropdown-item\",\n        className: \"maze-menu\",\n        onClick: () => this.dark_maze(maze),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 14\n        }\n      }, maze, \" maze\"), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"dropdown-divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 14\n        }\n      }));\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/pathfinder/setup/make_grid.js"],"names":["React","Component","Cell","Bfs","Dfs","greedy","astar","dijkstra","random_maze","random_kruskal","random_prims","wilson","Dropdown","DropdownButton","row_count","global","rc","col_count","cc","start_i","start_j","end_i","end_j","walls","make_grid","constructor","props","state","start_end","handleSearch","bind","startEnd","createWall","reset","make_maze","dark_maze","create_cell","cell","type","weight","algorithm","i","length","toString","walls_unique","Array","from","Set","ret","reset_paths","wait_time","animate_pathfind","undefined","setTimeout","animate_backtrack","path","x","y","str","document","getElementById","className","animate_maze","dark_animate_maze","maze","event","shiftKey","id","currentTarget","r","parseInt","getAttribute","c","a","split","b","push","maze_type","out","darken","setState","j","render","grid","temp","maze_list","alg_list","map","row","row_index","col","col_index","alg"],"mappings":";AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,iBAAP;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAO,iBAAP;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAO,UAAP;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,iBAAzC;AACA,OAAO,sCAAP;AACA,OAAO,2BAAP;AACA,OAAO,oCAAP;AACA,OAAO,sCAAP;AAIA,MAAMC,SAAS,GAAGC,MAAM,CAACC,EAAzB,C,CAA4B;;AAC5B,MAAMC,SAAS,GAAGF,MAAM,CAACG,EAAzB;AAEA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,KAAK,GAAG,EAAZ,C,CAEA;;AACA,IAAIC,KAAK,GAAG,EAAZ;AAGA,eAAe,MAAMC,SAAN,SAAwBvB,SAAxB,CAAkC;AAEhDwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAE,CADC,CACC;;AADD,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,KAAL,GAAa,KAAKA,KAAL,CAAWH,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKI,SAAL,GAAiB,KAAKA,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKK,SAAL,GAAiB,KAAKA,SAAL,CAAeL,IAAf,CAAoB,IAApB,CAAjB;AACA;AAED;AACA;;;AACAM,EAAAA,WAAW,GAAI;AACd,UAAMC,IAAI,GAAG;AACZC,MAAAA,IAAI,EAAE,EADM;AAEZC,MAAAA,MAAM,EAAE;AAFI,KAAb;AAIA,WAAOF,IAAP;AACA;AAED;AACA;;;AAEAR,EAAAA,YAAY,CAACV,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCiB,SAAxC,EAAmD;AAC9D,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,KAAK,CAACmB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACtClB,MAAAA,KAAK,CAACkB,CAAD,CAAL,GAAWlB,KAAK,CAACkB,CAAD,CAAL,CAASE,QAAT,EAAX;AACA;;AACD,QAAIC,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQxB,KAAR,CAAX,CAAnB,CAJ8D,CAK9D;;AACA,QAAIyB,GAAJ;;AACA,YAAQR,SAAR;AACC,WAAK,KAAL;AACC;AACAQ,QAAAA,GAAG,GAAG7C,GAAG,CAACgB,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCsB,YAAjC,CAAT;AACA;;AACD,WAAK,KAAL;AACC;AACAI,QAAAA,GAAG,GAAG5C,GAAG,CAACe,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCsB,YAAjC,CAAT;AACA;;AACD,WAAK,QAAL;AACC;AACAI,QAAAA,GAAG,GAAG3C,MAAM,CAACc,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCsB,YAAjC,CAAZ;AACA;;AACD,WAAK,OAAL;AACCI,QAAAA,GAAG,GAAG1C,KAAK,CAACa,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCsB,YAAjC,CAAX;AACA;;AACD,WAAK,UAAL;AACCI,QAAAA,GAAG,GAAGzC,QAAQ,CAACY,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCsB,YAAjC,CAAd;AACA;AAlBF;;AAqBA,SAAKK,WAAL;AACA,QAAIC,SAAS,GAAG,KAAKC,gBAAL,CAAsBH,GAAtB,CAAhB,CA7B8D,CA8B9D;;AACA,QAAIA,GAAG,CAACA,GAAG,CAACN,MAAJ,GAAW,CAAZ,CAAH,CAAkB,CAAlB,EAAqB,CAArB,KAA2BU,SAA/B,EAA0C;AACzC;AACAC,MAAAA,UAAU,CAAC,MAAM;AAChB,aAAKC,iBAAL,CAAuBN,GAAG,CAAEA,GAAG,CAACN,MAAJ,GAAa,CAAf,CAA1B;AACA,OAFS,EAEPQ,SAFO,CAAV;AAGA;AACD;AAED;AACA;;;AACAC,EAAAA,gBAAgB,CAACI,IAAD,EAAO;AACtB;AACA,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,IAAI,CAACb,MAAL,GAAc,CAAlC,EAAqCD,CAAC,EAAtC,EAA0C;AACzC,UAAIe,CAAC,GAAGD,IAAI,CAACd,CAAD,CAAJ,CAAQ,CAAR,CAAR;AACA,UAAIgB,CAAC,GAAGF,IAAI,CAACd,CAAD,CAAJ,CAAQ,CAAR,CAAR;AACA,YAAMiB,GAAG,GAAG,UAAUF,CAAV,GAAc,GAAd,GAAoBC,CAAhC;;AACA,UAAIE,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,IAA0C,iBAA9C,EAAiE;AACjE;AACC;AACA;AACA;;AACD,UAAIF,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,IAA0C,kBAA9C,EAAkE;AAClE;AACC;AACA;AACA,OAbwC,CAezC;AACA;AACA;AACA;AACC;AACA;AACA;AACA;;;AACDR,MAAAA,UAAU,CAAC,MAAM;AAChBM,QAAAA,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,GAAyC,mBAAzC,CADgB,CAEhB;AACA,OAHS,EAGR,KAAKpB,CAHG,CAAV,CAvByC,CA2BzC;AACA;;AACD,WAAO,KAAKc,IAAI,CAACb,MAAjB;AAEA,GAtG+C,CAwGhD;;;AACAY,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACvB,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,IAAI,CAACb,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,UAAIe,CAAC,GAAGD,IAAI,CAACd,CAAD,CAAJ,CAAQ,CAAR,CAAR;AACA,UAAIgB,CAAC,GAAGF,IAAI,CAACd,CAAD,CAAJ,CAAQ,CAAR,CAAR;;AACA,UAAIe,CAAC,IAAIrC,OAAL,IAAgBsC,CAAC,IAAIrC,OAAzB,EAAkC;AACjC;AACA;;AACD,UAAIoC,CAAC,IAAInC,KAAL,IAAcoC,CAAC,IAAInC,KAAvB,EAA8B;AAC7B;AACA,OARoC,CASrC;;;AACA,YAAMoC,GAAG,GAAG,UAAUF,CAAV,GAAc,GAAd,GAAoBC,CAAhC;AACAJ,MAAAA,UAAU,CAAC,MAAM;AAChBM,QAAAA,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,GAAyC,qBAAzC;AACA,OAFS,EAER,KAAKpB,CAFG,CAAV;AAGA;AACD;;AAEDqB,EAAAA,YAAY,GAAG;AACd,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,KAAK,CAACmB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACtC,YAAMiB,GAAG,GAAG,UAAUnC,KAAK,CAACkB,CAAD,CAAL,CAAS,CAAT,CAAV,GAAwB,GAAxB,GAA8BlB,KAAK,CAACkB,CAAD,CAAL,CAAS,CAAT,CAA1C;AACAY,MAAAA,UAAU,CAAC,MAAM;AAChBM,QAAAA,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,GAAyC,gBAAzC;AACA,OAFS,EAER,IAAIpB,CAFI,CAAV;AAGA;AACD;;AAEDsB,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACvB,SAAK,IAAIvB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,IAAI,CAACtB,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,YAAMiB,GAAG,GAAG,UAAUM,IAAI,CAACvB,CAAD,CAAJ,CAAQ,CAAR,CAAV,GAAuB,GAAvB,GAA6BuB,IAAI,CAACvB,CAAD,CAAJ,CAAQ,CAAR,CAAzC;AACAY,MAAAA,UAAU,CAAC,MAAM;AAChBM,QAAAA,QAAQ,CAACC,cAAT,CAAwBF,GAAxB,EAA6BG,SAA7B,GAAyC,OAAzC;AACA,OAFS,EAER,IAAIpB,CAFI,CAAV;AAGA;AACD;AAED;;;AAEAT,EAAAA,UAAU,CAACiC,KAAD,EAAQ;AACjB,QAAIA,KAAK,CAACC,QAAV,EAAoB;AACnB,YAAM;AAACC,QAAAA;AAAD,UAAOF,KAAK,CAACG,aAAnB,CADmB,CACc;;AACjC,UAAIC,CAAC,GAAGC,QAAQ,CAACX,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BI,YAA5B,CAAyC,KAAzC,CAAD,CAAhB;AACA,UAAIC,CAAC,GAAGF,QAAQ,CAACX,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BI,YAA5B,CAAyC,KAAzC,CAAD,CAAhB;AACAZ,MAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,gBAAxC;AACA,UAAIY,CAAC,GAAGN,EAAE,CAACO,KAAH,CAAS,GAAT,EAAc,CAAd,CAAR;AACA,UAAIC,CAAC,GAAGR,EAAE,CAACO,KAAH,CAAS,GAAT,EAAc,CAAd,CAAR,CANmB,CAOnB;;AACAnD,MAAAA,KAAK,CAACqD,IAAN,CAAW,CAACH,CAAD,EAAGE,CAAH,CAAX;AACA;AACD;;AAEDzC,EAAAA,SAAS,GAAG;AACX,SAAKD,KAAL;AACAV,IAAAA,KAAK,GAAGf,WAAW,EAAnB;AACA,SAAKsD,YAAL;AACA;;AAED3B,EAAAA,SAAS,CAAC0C,SAAD,EAAY;AACpB,QAAIC,GAAJ;AACA,SAAKC,MAAL;;AACA,YAAOF,SAAP;AACC,WAAK,SAAL;AACCC,QAAAA,GAAG,GAAGrE,cAAc,EAApB;AACA;;AACD,WAAK,MAAL;AACCqE,QAAAA,GAAG,GAAGpE,YAAY,EAAlB;AACA;;AACD,WAAK,QAAL;AACCoE,QAAAA,GAAG,GAAGnE,MAAM,EAAZ;AACA;AATF;;AAWAY,IAAAA,KAAK,GAAGuD,GAAG,CAACvD,KAAZ;AACA,SAAKwC,iBAAL,CAAuBe,GAAG,CAACd,IAA3B;AACA;AAGD;;;AACAjC,EAAAA,QAAQ,CAACkC,KAAD,EAAQ;AACf;AACA;AACA,UAAM;AAACE,MAAAA;AAAD,QAAOF,KAAK,CAACG,aAAnB,CAHe,CAGkB;;AACjC,QAAIC,CAAC,GAAGC,QAAQ,CAACX,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BI,YAA5B,CAAyC,KAAzC,CAAD,CAAhB;AACA,QAAIC,CAAC,GAAGF,QAAQ,CAACX,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BI,YAA5B,CAAyC,KAAzC,CAAD,CAAhB;;AACA,QAAI,KAAK5C,KAAL,CAAWC,SAAX,IAAwB,CAA5B,EAA+B;AAC9B;AACA+B,MAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAUzC,OAAV,GAAoB,GAApB,GAA0BC,OAAlD,EAA2DyC,SAA3D,GAAuE,OAAvE;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,iBAAxC;AACA,WAAKmB,QAAL,CAAc;AACbpD,QAAAA,SAAS,EAAE;AADE,OAAd;AAGAT,MAAAA,OAAO,GAAGkD,CAAV;AACAjD,MAAAA,OAAO,GAAGoD,CAAV;AACA,KATD,MASO;AACNb,MAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAUvC,KAAV,GAAkB,GAAlB,GAAwBC,KAAhD,EAAuDuC,SAAvD,GAAmE,OAAnE;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,kBAAxC;AACA,WAAKmB,QAAL,CAAc;AACbpD,QAAAA,SAAS,EAAE;AADE,OAAd;AAGAP,MAAAA,KAAK,GAAGgD,CAAR;AACA/C,MAAAA,KAAK,GAAGkD,CAAR;AACA;AAED,GA/M+C,CAiNhD;;;AACAO,EAAAA,MAAM,GAAG;AACR,SAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,SAApB,EAA+B2B,CAAC,EAAhC,EAAoC;AACnC,WAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,SAApB,EAA+BgE,CAAC,EAAhC,EAAoC;AACnC,YAAId,EAAE,GAAG,UAAU1B,CAAV,GAAc,GAAd,GAAoBwC,CAA7B;AACAtB,QAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,gBAAxC;AACA;AACD;AACD,GAzN+C,CA2NhD;;;AACA5B,EAAAA,KAAK,GAAG;AACP,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,SAApB,EAA+B2B,CAAC,EAAhC,EAAoC;AACnC,WAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,SAApB,EAA+BgE,CAAC,EAAhC,EAAoC;AACnC,YAAId,EAAE,GAAG,UAAU1B,CAAV,GAAc,GAAd,GAAoBwC,CAA7B;AACAtB,QAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,OAAxC;AACA;AACD;AACD,GAnO+C,CAqOhD;;;AACAZ,EAAAA,WAAW,GAAG;AACb,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,SAApB,EAA+B2B,CAAC,EAAhC,EAAoC;AACnC,WAAK,IAAIwC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,SAApB,EAA+BgE,CAAC,EAAhC,EAAoC;AACnC,YAAId,EAAE,GAAG,UAAU1B,CAAV,GAAc,GAAd,GAAoBwC,CAA7B;;AACA,YAAItB,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,IAAyC,mBAAzC,IACJF,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,IAAyC,qBADzC,EACgE;AAC/DF,UAAAA,QAAQ,CAACC,cAAT,CAAwBO,EAAxB,EAA4BN,SAA5B,GAAwC,OAAxC;AACA;AACD;AACD;AACD;AAED;;;AACAqB,EAAAA,MAAM,GAAG;AACR;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,SAApB,EAA+B2B,CAAC,EAAhC,EAAoC;AACnC,UAAI2C,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhE,SAApB,EAA+BgE,CAAC,EAAhC,EAAoC;AACnCG,QAAAA,IAAI,CAACR,IAAL,CAAU,CAAV;AACA;;AACDO,MAAAA,IAAI,CAACP,IAAL,CAAUQ,IAAV;AACA;;AACD,QAAIC,SAAS,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,CAAhB;AACA,QAAIC,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,QAAf,EAAyB,OAAzB,EAAkC,UAAlC,CAAf;AACA,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEEH,IAAI,CAACI,GAAL,CAAS,CAACC,GAAD,EAAMC,SAAN,KAAoB;AAC7B,0BACC;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,SAAN,KAAoB;AAC5B,cAAMtD,IAAI,GAAG,KAAKD,WAAL,EAAb;AACA,YAAI;AAACE,UAAAA,IAAD;AAAOC,UAAAA;AAAP,YAAiBF,IAArB;;AACA,YAAIoD,SAAS,IAAItE,OAAb,IAAwBwE,SAAS,IAAIvE,OAAzC,EAAkD;AACjDkB,UAAAA,IAAI,GAAG,YAAP;AACA,SAFD,MAEO,IAAImD,SAAS,IAAIpE,KAAb,IAAsBsE,SAAS,IAAIrE,KAAvC,EAA8C;AACpDgB,UAAAA,IAAI,GAAG,aAAP;AACA;;AACD,4BAAQ,oBAAC,IAAD;AAAM,UAAA,UAAU,EAAE,UAAUmD,SAAV,GAAsB,GAAtB,GAA4BE,SAA9C;AACR,UAAA,IAAI,EAAIrD,IADA;AACM,UAAA,MAAM,EAAIC,MADhB;AACwB,UAAA,GAAG,EAAIkD,SAD/B;AAC0C,UAAA,GAAG,EAAIE,SADjD;AAER,UAAA,WAAW,EAAE,KAAK3D,UAFV;AAGR,UAAA,OAAO,EAAE,KAAKD,QAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAKA,OAbA,CADD,CADD;AAkBA,KAnBA,CAFF,CADD,eAwBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxBD,eA2BC;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,EAAE,EAAC,qBAAR;AAA8B,MAAA,KAAK,EAAC,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,KAAK,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,KAAK,EAAC,mCAAd;AAAkD,MAAA,SAAS,EAAC,mBAA5D;AAAgF,MAAA,IAAI,EAAC,QAArF;AAA8F,MAAA,EAAE,EAAC,oBAAjG;AAAsH,qBAAY,UAAlI;AAA6I,uBAAc,MAA3J;AAAkK,uBAAc,OAAhL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,eAIC;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,yBAAgB,oBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEuD,QAAQ,CAACC,GAAT,CAAcK,GAAD,IAAS;AACvB;AACC,0BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAG,QAAA,KAAK,EAAC,eAAT;AAAyB,QAAA,SAAS,EAAC,iBAAnC;AAAqD,QAAA,OAAO,EAAI,MAAI,KAAK/D,YAAL,CACnEV,OADmE,EAEnEC,OAFmE,EAGnEC,KAHmE,EAInEC,KAJmE,EAKnEC,KALmE,EAMnEqE,GANmE,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOYA,GAPZ,CADD,eAUC;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVD,CADD;AAeA,KAjBA,CADF,CAJD,CADD,CADD,eA4BC;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,2BAA5B;AAAwD,MAAA,SAAS,EAAC,YAAlE;AAA+E,MAAA,EAAE,EAAC,cAAlF;AACA,MAAA,OAAO,EAAE,MAAI,KAAK3D,KAAL,EADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,CA5BD,eAmCC;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,KAAK,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,KAAK,EAAC,mCAAd;AAAkD,MAAA,SAAS,EAAC,aAA5D;AAA0E,MAAA,IAAI,EAAC,QAA/E;AAAwF,MAAA,EAAE,EAAC,oBAA3F;AAAgH,qBAAY,UAA5H;AAAuI,uBAAc,MAArJ;AAA4J,uBAAc,OAA1K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAIE;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,yBAAgB,oBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAG,MAAA,KAAK,EAAC,eAAT;AAAyB,MAAA,SAAS,EAAC,WAAnC;AAA+C,MAAA,OAAO,EAAI,KAAKC,SAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAIC;AAAK,MAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,CADD,EAOEmD,SAAS,CAACE,GAAV,CAAevB,IAAD,IAAU;AACxB,0BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAG,QAAA,KAAK,EAAC,eAAT;AAAyB,QAAA,SAAS,EAAC,WAAnC;AAA+C,QAAA,OAAO,EAAI,MAAI,KAAK7B,SAAL,CAAe6B,IAAf,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACEA,IADF,UADD,eAIC;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,CADD;AASA,KAVA,CAPF,CAJF,CADD,CAnCD,CADD,CA3BD,CADD;AA8FA;;AA7V+C","sourcesContent":["\nimport React, {Component} from 'react';\nimport Cell from './cell/cell'\nimport './make_grid.css'\nimport Bfs from '../algorithms/path_algs/bfs'\nimport Dfs from '../algorithms/path_algs/dfs'\nimport greedy from '../algorithms/path_algs/greedy'\nimport astar from '../algorithms/path_algs/astar'\nimport dijkstra from '../algorithms/path_algs/dijkstra'\nimport './cell/cell.css'\nimport random_maze from '../algorithms/maze_algs/random_maze'\nimport random_kruskal from '../algorithms/maze_algs/random_kruskal'\nimport random_prims from '../algorithms/maze_algs/random_prims'\nimport wilson from '../algorithms/maze_algs/wilson'\nimport './global'\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst row_count = global.rc // TODO: allow for user to input these values\nconst col_count = global.cc\n\nlet start_i = 15\nlet start_j = 20\n\nlet end_i = 15\nlet end_j = 30\n\n// for now, create walls that are hard coded and then color them in\nlet walls = []\n\n\nexport default class make_grid extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tstart_end: 0 // keeps track of start (0) or end (1)\n\t\t}\n\t\tthis.handleSearch = this.handleSearch.bind(this)\n\t\tthis.startEnd = this.startEnd.bind(this)\n\t\tthis.createWall = this.createWall.bind(this)\n\t\tthis.reset = this.reset.bind(this)\n\t\tthis.make_maze = this.make_maze.bind(this)\n\t\tthis.dark_maze = this.dark_maze.bind(this)\n\t}\n\n\t/************************** General Use Methods **************************/\n\t// create a cell\n\tcreate_cell () {\n\t\tconst cell = {\n\t\t\ttype: \"\",\n\t\t\tweight: 1\n\t\t}\n\t\treturn cell\n\t}\n\n\t/************************* Pathfinding Methods *************************/\n\t// runs bfs and returns the nodes visited path and backtrack path\n\n\thandleSearch(start_i, start_j, end_i, end_j, walls, algorithm) {\n\t\tfor (let i = 0; i < walls.length; i++) {\n\t\t\twalls[i] = walls[i].toString()\n\t\t}\n\t\tlet walls_unique = Array.from(new Set(walls));\n\t\t// run bfs\n\t\tlet ret;\n\t\tswitch (algorithm) {\n\t\t\tcase \"bfs\":\n\t\t\t\t// console.log(start_i, \" \", start_j)\n\t\t\t\tret = Bfs(start_i, start_j, end_i, end_j, walls_unique)\n\t\t\t\tbreak\n\t\t\tcase \"dfs\":\n\t\t\t\t// console.log(\"dfs switch case\")\n\t\t\t\tret = Dfs(start_i, start_j, end_i, end_j, walls_unique)\n\t\t\t\tbreak\n\t\t\tcase \"greedy\":\n\t\t\t\t// console.log(\"greedy\")\n\t\t\t\tret = greedy(start_i, start_j, end_i, end_j, walls_unique)\n\t\t\t\tbreak\n\t\t\tcase \"astar\":\n\t\t\t\tret = astar(start_i, start_j, end_i, end_j, walls_unique)\n\t\t\t\tbreak\n\t\t\tcase \"dijkstra\":\n\t\t\t\tret = dijkstra(start_i, start_j, end_i, end_j, walls_unique)\n\t\t\t\tbreak\n\n\t\t}\n\t\tthis.reset_paths()\n\t\tlet wait_time = this.animate_pathfind(ret)\n\t\t// console.log(wait_time)\n\t\tif (ret[ret.length-1][0][0] != undefined) {\n\t\t\t// console.log(algorithm, \" \", ret[ret.length-1].length)\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.animate_backtrack(ret[ ret.length - 1])\n\t\t\t}, wait_time)\n\t\t}\n\t}\n\n\t/************************* Animation Methods *************************/\n\t// pathfinding animation\n\tanimate_pathfind(path) {\n\t\t// length is path - 1 because the last element of the input is the array for backtrack steps\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tlet x = path[i][0]\n\t\t\tlet y = path[i][1]\n\t\t\tconst str = 'cell-' + x + '-' + y\n\t\t\tif (document.getElementById(str).className == 'cell cell-start') {\n\t\t\t// if (x == start_i && y == start_j) {\n\t\t\t\t// document.getElementById(str).className = 'cell cell-start'\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif (document.getElementById(str).className == 'cell cell-finish') {\n\t\t\t// if (x == end_i && y == end_j) {\n\t\t\t\t// document.getElementById(str).className = 'cell cell-finish'\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t\n\t\t\t// if (x == 15 && y == 20 || x == 15 && y==30) {\n\t\t\t// \tconsole.log(\"debugging \", document.getElementById(str).className)\n\t\t\t// }\n\t\t\t// if (document.getElementById(str).className== 'cell ') {\n\t\t\t\t// for some reason, having a console.log makes the color change, but not having this doesnt\n\t\t\t\t// if (x == 15 && y == 20 || x == 15 && y==30) {\n\t\t\t\t// \tconsole.log(\"debugging \", document.getElementById(str).className, \" \", x, \" \", y)\n\t\t\t\t// }\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.getElementById(str).className = 'cell cell-visited'\n\t\t\t\t// this.animate_backtrack(path[ path.length - 1])\n\t\t\t},10 * i)\n\t\t\t// }\n\t\t}\n\t\treturn 10 * path.length\n\n\t}\n\n\t// backtrack animation\n\tanimate_backtrack(path) {\n\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\tlet x = path[i][0]\n\t\t\tlet y = path[i][1]\n\t\t\tif (x == start_i && y == start_j) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif (x == end_i && y == end_j) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// console.log(x, y)\n\t\t\tconst str = 'cell-' + x + '-' + y\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.getElementById(str).className = 'cell cell-backtrack'\n\t\t\t},50 * i);\n\t\t}\n\t}\n\n\tanimate_maze() {\n\t\tfor (let i = 0; i < walls.length; i++) {\n\t\t\tconst str = 'cell-' + walls[i][0] + '-' + walls[i][1]\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.getElementById(str).className = 'cell cell-wall'\n\t\t\t},5 * i);\n\t\t}\n\t}\n\n\tdark_animate_maze(maze) {\n\t\tfor (let i = 0; i < maze.length; i++) {\n\t\t\tconst str = 'cell-' + maze[i][0] + '-' + maze[i][1]\n\t\t\tsetTimeout(() => {\n\t\t\t\tdocument.getElementById(str).className = 'cell '\n\t\t\t},5 * i);\n\t\t}\n\t}\n\n\t/****************************** Generate Walls *************************/\n\n\tcreateWall(event) {\n\t\tif (event.shiftKey) {\n\t\t\tconst {id} = event.currentTarget // row and col are not returned for this\n\t\t\tlet r = parseInt(document.getElementById(id).getAttribute(\"row\"))\n\t\t\tlet c = parseInt(document.getElementById(id).getAttribute(\"col\"))\n\t\t\tdocument.getElementById(id).className = 'cell cell-wall'\n\t\t\tlet a = id.split(\"-\")[1]\n\t\t\tlet b = id.split(\"-\")[2]\n\t\t\t// console.log(a,b)\n\t\t\twalls.push([a,b])\n\t\t} \n\t}\n\n\tmake_maze() {\n\t\tthis.reset()\n\t\twalls = random_maze()\n\t\tthis.animate_maze()\n\t}\n\n\tdark_maze(maze_type) {\n\t\tlet out;\n\t\tthis.darken()\n\t\tswitch(maze_type) {\n\t\t\tcase \"kruskal\":\n\t\t\t\tout = random_kruskal()\n\t\t\t\tbreak\n\t\t\tcase \"prim\":\n\t\t\t\tout = random_prims()\n\t\t\t\tbreak\n\t\t\tcase \"wilson\":\n\t\t\t\tout = wilson()\n\t\t\t\tbreak\n\t\t}\n\t\twalls = out.walls\n\t\tthis.dark_animate_maze(out.maze)\n\t}\n\n\n\t/****************************** Mouse Click Methods *************************/\n\tstartEnd(event) {\n\t\t// TODO;\n\t\t// disallow clicking of walls\n\t\tconst {id} = event.currentTarget // row and col are not returned for this\n\t\tlet r = parseInt(document.getElementById(id).getAttribute(\"row\"))\n\t\tlet c = parseInt(document.getElementById(id).getAttribute(\"col\"))\n\t\tif (this.state.start_end == 0) {\n\t\t\t// reset the start colors\n\t\t\tdocument.getElementById('cell-' + start_i + '-' + start_j).className = 'cell '\n\t\t\tdocument.getElementById(id).className = 'cell cell-start'\n\t\t\tthis.setState({\n\t\t\t\tstart_end: 1\n\t\t\t})\n\t\t\tstart_i = r\n\t\t\tstart_j = c\n\t\t} else {\n\t\t\tdocument.getElementById('cell-' + end_i + '-' + end_j).className = 'cell '\n\t\t\tdocument.getElementById(id).className = 'cell cell-finish'\n\t\t\tthis.setState({\n\t\t\t\tstart_end: 0\n\t\t\t})\n\t\t\tend_i = r\n\t\t\tend_j = c\n\t\t}\n\t\t\n\t}\n\n\t// darkens the entire grid\n\tdarken() {\n\t\tfor (let i = 0; i < row_count; i++) {\n\t\t\tfor (let j = 0; j < col_count; j++) {\n\t\t\t\tlet id = 'cell-' + i + '-' + j;\n\t\t\t\tdocument.getElementById(id).className = 'cell cell-wall'\n\t\t\t}\n\t\t}\n\t}\n\n\t// clears the entire grid\n\treset() {\n\t\tfor (let i = 0; i < row_count; i++) {\n\t\t\tfor (let j = 0; j < col_count; j++) {\n\t\t\t\tlet id = 'cell-' + i + '-' + j;\n\t\t\t\tdocument.getElementById(id).className = 'cell '\n\t\t\t}\n\t\t}\n\t}\n\n\t// keeps the walls; resets the path colors\n\treset_paths() {\n\t\tfor (let i = 0; i < row_count; i++) {\n\t\t\tfor (let j = 0; j < col_count; j++) {\n\t\t\t\tlet id = 'cell-' + i + '-' + j;\n\t\t\t\tif (document.getElementById(id).className == 'cell cell-visited' || \n\t\t\t\tdocument.getElementById(id).className == 'cell cell-backtrack') {\n\t\t\t\t\tdocument.getElementById(id).className = 'cell '\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/****************************** Rendering *************************/\n\trender() {\n\t\t// setup for grid\n\t\tlet grid = []\n\t\tfor (let i = 0; i < row_count; i++) {\n\t\t\tlet temp = []\n\t\t\tfor (let j = 0; j < col_count; j++) {\n\t\t\t\ttemp.push(0)\n\t\t\t}\n\t\t\tgrid.push(temp)\n\t\t}\n\t\tlet maze_list = [\"kruskal\", \"prim\", \"wilson\"]\n\t\tlet alg_list = [\"bfs\", \"dfs\", \"greedy\", \"astar\", \"dijkstra\"]\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className = \"grid\" > \n\n\t\t\t\t\t{grid.map((row, row_index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t{row.map((col, col_index) => {\n\t\t\t\t\t\t\t\tconst cell = this.create_cell()\n\t\t\t\t\t\t\t\tlet {type, weight} = cell\n\t\t\t\t\t\t\t\tif (row_index == start_i && col_index == start_j) {\n\t\t\t\t\t\t\t\t\ttype = 'cell-start'\n\t\t\t\t\t\t\t\t} else if (row_index == end_i && col_index == end_j) {\n\t\t\t\t\t\t\t\t\ttype = 'cell-finish'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (<Cell element_id={'cell-' + row_index + '-' + col_index}\n\t\t\t\t\t\t\t\ttype = {type} weight = {weight} row = {row_index} col = {col_index} \n\t\t\t\t\t\t\t\tonMouseMove={this.createWall} \n\t\t\t\t\t\t\t\tonClick={this.startEnd} />)\n\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t\" \"\n\t\t\t\t</div>\n\t\t\t\t<div class=\"container\">\n\t\t\t\t\t<div id=\"pathfinder-dropdown\" class=\"row text-center\">\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<div class=\"dropdown\" >\n\t\t\t\t\t\t\t\t<button class=\"btn btn-secondary dropdown-toggle\" className=\"algorithms-button\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t\t\tSelect Algorithm\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n\t\t\t\t\t\t\t\t\t{alg_list.map((alg) => {\n\t\t\t\t\t\t\t\t\t// console.log(typeof(alg))\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" className=\"algorithms-menu\" onClick = {()=>this.handleSearch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart_i,\n\t\t\t\t\t\t\t\t\t\t\t\t\tstart_j,\n\t\t\t\t\t\t\t\t\t\t\t\t\tend_i,\n\t\t\t\t\t\t\t\t\t\t\t\t\tend_j,\n\t\t\t\t\t\t\t\t\t\t\t\t\twalls,\n\t\t\t\t\t\t\t\t\t\t\t\t\talg)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tVisualize {alg}\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"dropdown-divider\"></div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-outline-secondary\" className=\"btn-xlarge\" id=\"reset button\"\n\t\t\t\t\t\t\tonClick={()=>this.reset()}>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"col-4\">\n\t\t\t\t\t\t\t<div class=\"dropdown\" >\n\t\t\t\t\t\t\t\t\t<button class=\"btn btn-secondary dropdown-toggle\" className=\"maze-button\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t\t\t\t\tSelect Maze\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" className=\"maze-menu\" onClick = {this.make_maze}>\n\t\t\t\t\t\t\t\t\t\t\t\tGeneral Maze\n\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"dropdown-divider\"></div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{maze_list.map((maze) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" className=\"maze-menu\" onClick = {()=>this.dark_maze(maze)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{maze} maze\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"dropdown-divider\"></div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}