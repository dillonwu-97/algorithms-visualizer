{"ast":null,"code":"import React from'react';import{backtrack,initialize_visited}from'./general';import'../../setup/global';var heapq=require('heapq');export default function dijkstra(start_i,start_j,end_i,end_j,walls){console.log(start_i,start_j);var cmp=function cmp(x,y){return x[0]<y[0];};var row_count=global.rc;var col_count=global.cc;var weight=1;// this can change later\nvar q=[];// using push and shift\n// visited, all are initialized to null \n// console.log(start_i, start_j, end_i, end_j, row_count)\n// heapq.push(heap, [-3, {a:1, b:2}], cmp);\nvar visited=initialize_visited(row_count,col_count);heapq.push(q,[0,{coord:[start_i,start_j],count:0,prev:[start_i,start_j]}],cmp);var out_pre,out,distance;var return_vals=[];// return the list of nodes that were visited in order\nwhile(q.length!=0){out_pre=heapq.pop(q,cmp);out=out_pre[1];var out_i=out.coord[0];var out_j=out.coord[1];// console.log(walls)\n// console.log(typeof([13,25]), typeof(walls[0]))\nif(walls.includes([out_i,out_j].toString())){continue;}return_vals.push([out_i,out_j]);visited[out_i][out_j]=out.prev;// appending in each direction\nif(out_i==end_i&&out_j==end_j){// console.log('astar count: ', out.count)\nreturn_vals.push(backtrack(start_i,start_j,end_i,end_j,visited));break;}// console.log(out)\nif(out_i>0&&visited[out_i-1][out_j]==0){distance=out.count+weight;// 10 for uniform cost\nheapq.push(q,[distance,{coord:[out_i-1,out_j],count:out.count+1,prev:out.coord}],cmp);visited[out_i-1][out_j]=1;// to mark the node as in the process of being visited\n}if(out_j>0&&visited[out_i][out_j-1]==0){distance=out.count+weight;heapq.push(q,[distance,{coord:[out_i,out_j-1],count:out.count+1,prev:out.coord}],cmp);visited[out_i][out_j-1]=1;}if(out_i<row_count-1&&visited[out_i+1][out_j]==0){distance=out.count+weight;heapq.push(q,[distance,{coord:[out_i+1,out_j],count:out.count+1,prev:out.coord}],cmp);visited[out_i+1][out_j]=1;}if(out_j<col_count-1&&visited[out_i][out_j+1]==0){distance=out.count+weight;heapq.push(q,[distance,{coord:[out_i,out_j+1],count:out.count+1,prev:out.coord}],cmp);visited[out_i][out_j+1]=1;}}return return_vals;// return_vals[-1] is the backtrack array; everything before that is order of traversal\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/algorithms/path_algs/dijkstra.js"],"names":["React","backtrack","initialize_visited","heapq","require","dijkstra","start_i","start_j","end_i","end_j","walls","console","log","cmp","x","y","row_count","global","rc","col_count","cc","weight","q","visited","push","coord","count","prev","out_pre","out","distance","return_vals","length","pop","out_i","out_j","includes","toString"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { backtrack, initialize_visited } from './general'\nimport '../../setup/global'\nvar heapq = require('heapq')\n\n\nexport default function dijkstra(start_i, start_j, end_i, end_j, walls) {\n    console.log(start_i, start_j)\n    var cmp = function(x, y) {return x[0] < y[0];}\n\n    let row_count = global.rc\n    let col_count = global.cc\n    let weight = 1 // this can change later\n\n\tlet q = [] // using push and shift\n\t// visited, all are initialized to null \n    // console.log(start_i, start_j, end_i, end_j, row_count)\n    // heapq.push(heap, [-3, {a:1, b:2}], cmp);\n\n    let visited = initialize_visited(row_count, col_count);\n\theapq.push(q, [0, {coord: [start_i, start_j], count: 0, prev: [start_i, start_j]}], cmp )\n\tlet out_pre, out, distance; \n\tlet return_vals = []; // return the list of nodes that were visited in order\n\twhile(q.length != 0) {\n        out_pre = heapq.pop(q, cmp)\n        out = out_pre[1]\n\t\tlet out_i = out.coord[0]\n\t\tlet out_j = out.coord[1]\n\t\t// console.log(walls)\n\t\t// console.log(typeof([13,25]), typeof(walls[0]))\n\t\tif (walls.includes([out_i, out_j].toString())) {\n\t\t\tcontinue;\n\t\t}\n        return_vals.push([out_i, out_j])\n        visited[out_i][out_j] = out.prev\n        // appending in each direction\n\n\t\tif (out_i == end_i && out_j == end_j) {\n\t\t\t// console.log('astar count: ', out.count)\n\t\t\treturn_vals.push(backtrack(start_i, start_j, end_i, end_j, visited))\n\t\t\tbreak;\n\t\t}\n\t\t// console.log(out)\n\t\tif (out_i > 0 && visited[out_i-1][out_j] == 0) {\n            distance = out.count + weight // 10 for uniform cost\n\t\t\theapq.push(q, [distance, {coord:[out_i-1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i-1][out_j] = 1 // to mark the node as in the process of being visited\n\t\t}\n\t\tif (out_j > 0 && visited[out_i][out_j-1] == 0) {\n            distance = out.count + weight\n            heapq.push(q, [distance, {coord:[out_i, out_j-1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j-1] = 1\n\t\t}\n\t\tif (out_i < row_count-1 && visited[out_i+1][out_j] == 0) {\n            distance = out.count + weight\n\t\t\theapq.push(q, [distance, {coord:[out_i+1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i+1][out_j] = 1\n\t\t}\n\t\tif (out_j < col_count-1 && visited[out_i][out_j+1] == 0) {\n            distance = out.count + weight\n\t\t\theapq.push(q, [distance, {coord:[out_i, out_j+1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j+1] = 1\n\t\t}\n\t}\n\treturn return_vals // return_vals[-1] is the backtrack array; everything before that is order of traversal\n\n\n}\n"]},"metadata":{},"sourceType":"module"}