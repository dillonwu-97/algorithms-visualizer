{"ast":null,"code":"'use strict'; //\n//                 0\n//         1               2\n//\n//    3        4       5        6\n//\n// 7     8  9    10 11   12  13   14\n//\n\nvar heapq = exports;\n\nvar cmplt = function (x, y) {\n  return x < y;\n}; // push an item into heap, O(log n)\n\n\nheapq.push = function (heap, item, cmp) {\n  heap.push(item);\n  siftdown(heap, 0, heap.length - 1, cmp || cmplt);\n}; // pop the smallest item from heap, O(log n)\n\n\nheapq.pop = function (heap, cmp) {\n  if (heap.length > 0) {\n    var last = heap.pop();\n\n    if (heap.length > 0) {\n      var head = heap[0];\n      heap[0] = last;\n      siftup(heap, 0, cmp || cmplt);\n      return head;\n    } else {\n      return last;\n    }\n  }\n}; // get the top item, O(1)\n\n\nheapq.top = function (heap) {\n  if (heap.length !== 0) return heap[0];\n}; // push an item on the heap and pop out the top item,\n// this runs more efficiently than `heapq.push()` followed\n// by a separate call to `heapq.pop()`, O(log n)\n\n\nheapq.pushpop = function (heap, item, cmp) {\n  cmp = cmp || cmplt;\n\n  if (heap.length > 0 && cmp(heap[0], item)) {\n    var temp = heap[0];\n    heap[0] = item;\n    item = temp;\n    siftup(heap, 0, cmp);\n  }\n\n  return item;\n}; // transform array `heap` into a heap in-place, O(nlog n)\n\n\nheapq.heapify = function (arr, cmp) {\n  cmp = cmp || cmplt;\n\n  for (var idx = Math.floor(arr.length / 2) - 1; idx >= 0; --idx) siftup(arr, idx, cmp);\n\n  return arr;\n}; // heap sort, O(nlog n)\n\n\nheapq.heapsort = function (arr, cmp) {\n  var heap = [];\n\n  for (var i = 0; i < arr.length; ++i) heapq.push(heap, arr[i], cmp);\n\n  var arr_ = [];\n\n  while (heap.length > 0) arr_.push(heapq.pop(heap, cmp));\n\n  return arr_;\n};\n\nfunction siftdown(heap, startIdx, idx, cmp) {\n  var item = heap[idx];\n\n  while (idx > startIdx) {\n    var parentIdx = idx - 1 >> 1;\n    var parentItem = heap[parentIdx];\n\n    if (cmp(item, parentItem)) {\n      heap[idx] = parentItem;\n      idx = parentIdx;\n      continue;\n    }\n\n    break;\n  }\n\n  heap[idx] = item;\n}\n\nfunction siftup(heap, idx, cmp) {\n  var endIdx = heap.length;\n  var startIdx = idx;\n  var item = heap[idx];\n  var childIdx = idx * 2 + 1;\n\n  while (childIdx < endIdx) {\n    var rightIdx = childIdx + 1;\n\n    if (rightIdx < endIdx && !cmp(heap[childIdx], heap[rightIdx])) {\n      childIdx = rightIdx;\n    }\n\n    heap[idx] = heap[childIdx];\n    idx = childIdx;\n    childIdx = idx * 2 + 1;\n  }\n\n  heap[idx] = item;\n  siftdown(heap, startIdx, idx, cmp);\n}","map":{"version":3,"sources":["/Users/Kvothe/node_modules/heapq/index.js"],"names":["heapq","exports","cmplt","x","y","push","heap","item","cmp","siftdown","length","pop","last","head","siftup","top","pushpop","temp","heapify","arr","idx","Math","floor","heapsort","i","arr_","startIdx","parentIdx","parentItem","endIdx","childIdx","rightIdx"],"mappings":"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","sourcesContent":["'use strict';\n\n//\n//                 0\n//         1               2\n//\n//    3        4       5        6\n//\n// 7     8  9    10 11   12  13   14\n//\n\nvar heapq = exports;\n\nvar cmplt = function(x, y) {\n  return x < y;\n};\n\n// push an item into heap, O(log n)\nheapq.push = function(heap, item, cmp) {\n  heap.push(item);\n  siftdown(heap, 0, heap.length - 1, cmp || cmplt);\n};\n\n// pop the smallest item from heap, O(log n)\nheapq.pop = function(heap, cmp) {\n  if (heap.length > 0) {\n    var last = heap.pop();\n\n    if (heap.length > 0) {\n      var head = heap[0];\n      heap[0] = last;\n      siftup(heap, 0, cmp || cmplt);\n      return head;\n    } else {\n      return last;\n    }\n  }\n};\n\n// get the top item, O(1)\nheapq.top = function(heap) {\n  if (heap.length !== 0)\n    return heap[0];\n};\n\n// push an item on the heap and pop out the top item,\n// this runs more efficiently than `heapq.push()` followed\n// by a separate call to `heapq.pop()`, O(log n)\nheapq.pushpop = function(heap, item, cmp) {\n  cmp = cmp || cmplt;\n\n  if (heap.length > 0 && cmp(heap[0], item)) {\n    var temp = heap[0];\n    heap[0] = item;\n    item = temp;\n    siftup(heap, 0, cmp);\n  }\n  return item;\n};\n\n// transform array `heap` into a heap in-place, O(nlog n)\nheapq.heapify = function(arr, cmp) {\n  cmp = cmp || cmplt;\n\n  for (var idx = Math.floor(arr.length / 2) - 1;\n       idx >= 0; --idx)\n    siftup(arr, idx, cmp);\n  return arr;\n};\n\n// heap sort, O(nlog n)\nheapq.heapsort = function(arr, cmp) {\n  var heap = [];\n\n  for (var i = 0; i < arr.length; ++i)\n    heapq.push(heap, arr[i], cmp);\n\n  var arr_ = [];\n\n  while (heap.length > 0)\n    arr_.push(heapq.pop(heap, cmp));\n  return arr_;\n};\n\nfunction siftdown(heap, startIdx, idx, cmp) {\n  var item = heap[idx];\n\n  while (idx > startIdx) {\n    var parentIdx = (idx - 1) >> 1;\n    var parentItem = heap[parentIdx];\n    if (cmp(item, parentItem)) {\n      heap[idx] = parentItem;\n      idx = parentIdx;\n      continue;\n    }\n    break;\n  }\n\n  heap[idx] = item;\n}\n\nfunction siftup(heap, idx, cmp) {\n  var endIdx = heap.length;\n  var startIdx = idx;\n  var item = heap[idx];\n\n  var childIdx = idx * 2 + 1;\n\n  while (childIdx < endIdx) {\n    var rightIdx = childIdx + 1;\n\n    if (rightIdx < endIdx && (!cmp(\n      heap[childIdx], heap[rightIdx]))) {\n      childIdx = rightIdx;\n    }\n    heap[idx] = heap[childIdx];\n    idx = childIdx;\n    childIdx =  idx * 2 + 1;\n  }\n\n  heap[idx] = item;\n  siftdown(heap, startIdx, idx, cmp);\n}\n"]},"metadata":{},"sourceType":"script"}