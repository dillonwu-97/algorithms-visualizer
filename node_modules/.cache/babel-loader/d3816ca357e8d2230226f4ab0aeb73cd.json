{"ast":null,"code":"import React from'react';import'../../setup/global';// global.rc = 19\n// global.cc = 19\n// random_prims()\n/*\nStart with a grid full of walls.\nPick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.\nWhile there are walls in the list:\nPick a random wall from the list. If only one of the two cells that the wall divides is visited, then:\nMake the wall a passage and mark the unvisited cell as part of the maze.\nAdd the neighboring walls of the cell to the wall list.\nRemove the wall from the list.\n*/export default function random_prims(){// create setup to check adjacencies\nvar visited=initialize_visited(global.rc,global.cc);var walls=initialize_visited(global.rc,global.cc);// randomize array\nvar maze=[];for(var i=1;i<global.rc-1;i++){for(var j=1;j<global.cc-1;j++){if(j%2==1&&i%2==1){walls[i][j]=0;}else{walls[i][j]=1;}}}for(var _i=0;_i<global.cc;_i++){walls[0][_i]=1;walls[global.rc-1][_i]=1;}for(var _i2=0;_i2<global.rc;_i2++){walls[_i2][0]=1;walls[_i2][global.cc-1]=1;}// for (let i = 0; i < global.rc; i++) {\n//     console.log(walls[i].toString())\n//     // console.log('\\n')\n// }\n// picking a random point and marking it as part of the maze\n// 31 rows, 51 columns; 2n+1 formula so random starts at 29-1 // 14 = 15, 49-1//2 = 24; +1 to avoid edges\nvar in_wall_list=initialize_visited(global.rc,global.cc);var rand_i=2*Math.floor(Math.random()*Math.floor((global.rc-1)/2))+1;var rand_j=2*Math.floor(Math.random()*Math.floor((global.cc-1)/2))+1;console.log(rand_i,\" \",rand_j);// in_wall_list[rand_i][rand_j] = 1\nvisited[rand_i][rand_j]=1;var rand_int,out,x,y,ret_val;var wall_list=[];in_wall_list[rand_i+1][rand_j]=1;in_wall_list[rand_i-1][rand_j]=1;in_wall_list[rand_i][rand_j+1]=1;in_wall_list[rand_i][rand_j-1]=1;wall_list.push([rand_i+1,rand_j],[rand_i-1,rand_j],[rand_i,rand_j+1],[rand_i,rand_j-1]);maze.push([rand_i,rand_j]);while(wall_list.length>0){// console.log(wall_list.length, wall_list)\nrand_int=Math.floor(Math.random()*Math.floor(wall_list.length));out=wall_list.splice(rand_int,1)[0];x=out[0];y=out[1];console.log(\"rand num \",rand_int,' x ',x,' y ',y);if(x==0||y==0||x==global.rc-1||y==global.cc-1){continue;}// if one of the two spaces are visited\nif(visited[x+1][y]==0&&visited[x-1][y]==1||visited[x+1][y]==1&&visited[x-1][y]==0){// append walls adjacent to the new cell\nmaze.push([x,y]);if(visited[x+1][y]==0){ret_val=append_adj(wall_list,x+1,y,in_wall_list,walls);visited[x+1][y]=1;maze.push([x+1,y]);}else if(visited[x-1][y]==0){ret_val=append_adj(wall_list,x-1,y,in_wall_list,walls);visited[x-1][y]=1;maze.push([x-1,y]);}wall_list=ret_val.a;in_wall_list=ret_val.in_a;walls[x][y]=0;visited[x][y]=1;}else if(visited[x][y+1]==0&&visited[x][y-1]==1||visited[x][y+1]==1&&visited[x][y-1]==0){maze.push([x,y]);if(visited[x][y+1]==0){ret_val=append_adj(wall_list,x,y+1,in_wall_list,walls);visited[x][y+1]=1;maze.push([x,y+1]);}else if(visited[x][y-1]==0){ret_val=append_adj(wall_list,x,y-1,in_wall_list,walls);visited[x][y-1]=1;maze.push([x,y-1]);}wall_list=ret_val.a;in_wall_list=ret_val.in_a;walls[x][y]=0;visited[x][y]=1;}}for(var _i3=0;_i3<global.rc;_i3++){console.log(walls[_i3].toString());// console.log('\\n')\n}// console.log(set.extract())\nvar ret_walls=[];for(var _i4=0;_i4<walls.length;_i4++){for(var _j=0;_j<walls[0].length;_j++){if(walls[_i4][_j]==1){ret_walls.push([_i4,_j]);}}}// // console.log(maze)\n// // console.log( {\"maze\": maze, \"walls\": ret_walls})\nreturn{\"maze\":maze,\"walls\":ret_walls};}function append_adj(a,row,col,in_a,walls){console.log(\"before \",a,\" \",row,\" \",col);for(var i=-1;i<=1;i+=2){if(walls[row+i][col]==1&&in_a[row+i][col]==0){a.push([row+i,col]);in_a[row+i][col]=1;}if(walls[row][col+i]==1&&in_a[row][col+i]==0){a.push([row,col+i]);in_a[row][col+i]=1;}}console.log(\"after \",a);return{\"a\":a,\"in_a\":in_a};}function initialize_visited(row_count,col_count){var visited=new Array(row_count);for(var i=0;i<row_count;i++){visited[i]=new Array(col_count).fill(0);}return visited;}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/algorithms/maze_algs/random_prims.js"],"names":["React","random_prims","visited","initialize_visited","global","rc","cc","walls","maze","i","j","in_wall_list","rand_i","Math","floor","random","rand_j","console","log","rand_int","out","x","y","ret_val","wall_list","push","length","splice","append_adj","a","in_a","toString","ret_walls","row","col","row_count","col_count","Array","fill"],"mappings":"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","sourcesContent":["import React from 'react'\nimport '../../setup/global'\n\n// global.rc = 19\n// global.cc = 19\n// random_prims()\n/*\nStart with a grid full of walls.\nPick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.\nWhile there are walls in the list:\nPick a random wall from the list. If only one of the two cells that the wall divides is visited, then:\nMake the wall a passage and mark the unvisited cell as part of the maze.\nAdd the neighboring walls of the cell to the wall list.\nRemove the wall from the list.\n*/\nexport default function random_prims() {\n    // create setup to check adjacencies\n    let visited = initialize_visited(global.rc, global.cc);\n    let walls = initialize_visited(global.rc, global.cc)\n\n    // randomize array\n    let maze = []\n    for (let i = 1; i < global.rc-1; i++) {\n        for (let j = 1; j < global.cc-1; j++) {\n            if (j % 2 == 1 && i % 2 == 1) {\n                walls[i][j] = 0\n            } else {\n                walls[i][j] = 1\n            }\n        }\n    }\n    for (let i = 0; i < global.cc; i++) {\n        walls[0][i] = 1\n        walls[global.rc-1][i] = 1\n    }\n    for (let i = 0; i < global.rc; i++) {\n        walls[i][0] = 1\n        walls[i][global.cc-1] = 1\n    }\n    // for (let i = 0; i < global.rc; i++) {\n    //     console.log(walls[i].toString())\n    //     // console.log('\\n')\n    // }\n    \n    // picking a random point and marking it as part of the maze\n    // 31 rows, 51 columns; 2n+1 formula so random starts at 29-1 // 14 = 15, 49-1//2 = 24; +1 to avoid edges\n    let in_wall_list = initialize_visited(global.rc, global.cc)\n    let rand_i = 2 * Math.floor(Math.random() * Math.floor( (global.rc-1) /2)) + 1\n    let rand_j = 2 * Math.floor(Math.random() * Math.floor( (global.cc-1) / 2)) + 1\n    console.log(rand_i, \" \", rand_j)\n    // in_wall_list[rand_i][rand_j] = 1\n    visited[rand_i][rand_j]=1\n    let rand_int, out, x, y, ret_val\n    let wall_list = []\n    in_wall_list[rand_i+1][rand_j] = 1\n    in_wall_list[rand_i-1][rand_j] = 1\n    in_wall_list[rand_i][rand_j+1] = 1\n    in_wall_list[rand_i][rand_j-1] = 1\n    wall_list.push([rand_i+1, rand_j], [rand_i-1, rand_j], [rand_i, rand_j+1], [rand_i, rand_j-1])\n    maze.push([rand_i, rand_j])\n    while (wall_list.length > 0) {\n        // console.log(wall_list.length, wall_list)\n        rand_int = Math.floor(Math.random() * Math.floor(wall_list.length))\n        out = wall_list.splice(rand_int,1)[0]\n        x = out[0]\n        y = out[1]\n        console.log(\"rand num \", rand_int, ' x ', x, ' y ', y)\n        if (x == 0 || y == 0 || x == global.rc-1 || y == global.cc -1) {\n            continue\n        }\n        // if one of the two spaces are visited\n        if (visited[x+1][y] == 0 && visited[x-1][y] == 1 || visited[x+1][y] == 1 && visited[x-1][y] == 0){\n            // append walls adjacent to the new cell\n            maze.push([x,y])\n            if (visited[x+1][y] == 0) {\n                ret_val = append_adj(wall_list, x+1,y, in_wall_list, walls)\n                visited[x+1][y] = 1\n                maze.push([x+1,y])\n            } else if (visited[x-1][y] == 0) {\n                ret_val = append_adj(wall_list, x-1,y, in_wall_list, walls)\n                visited[x-1][y] = 1\n                maze.push([x-1,y])\n            }\n            wall_list = ret_val.a \n            in_wall_list = ret_val.in_a\n            walls[x][y] = 0\n            visited[x][y] = 1\n            \n        } else if (visited[x][y+1] == 0 && visited[x][y-1] == 1 || visited[x][y+1] == 1 && visited[x][y-1] == 0) {\n            maze.push([x,y])\n            if (visited[x][y+1] == 0) {\n                ret_val = append_adj(wall_list, x,y+1, in_wall_list, walls)\n                visited[x][y+1] = 1\n                maze.push([x,y+1])\n            } else if (visited[x][y-1] == 0) {\n                ret_val = append_adj(wall_list, x,y-1, in_wall_list, walls)\n                visited[x][y-1] = 1\n                maze.push([x,y-1])\n            }\n            wall_list = ret_val.a \n            in_wall_list= ret_val.in_a\n            walls[x][y] = 0\n            visited[x][y] = 1\n        }\n\n    }\n    \n    for (let i = 0; i < global.rc; i++) {\n        console.log(walls[i].toString())\n        // console.log('\\n')\n    }\n\n\n    // console.log(set.extract())\n    let ret_walls = []\n    for (let i = 0; i < walls.length; i++) {\n        for (let j = 0; j < walls[0].length; j++) {\n            if (walls[i][j] == 1) {\n                ret_walls.push([i,j])\n            }\n        }\n    }\n\n    // // console.log(maze)\n    // // console.log( {\"maze\": maze, \"walls\": ret_walls})\n    return {\"maze\": maze, \"walls\": ret_walls}\n    \n}\n\n\nfunction append_adj(a,row,col, in_a, walls) {\n    console.log(\"before \", a, \" \", row, \" \", col)\n    for (let i = -1; i <=1; i+=2) {\n        if (walls[row+i][col] == 1 && in_a[row+i][col] == 0) {\n            a.push([row+i,col])\n            in_a[row+i][col] = 1\n\n        }\n        if (walls[row][col+i] == 1 && in_a[row][col+i]==0) {\n            a.push([row,col+i])\n            in_a[row][col+i] = 1\n        }\n    }\n    console.log(\"after \", a)\n    \n    return {\"a\": a, \"in_a\":in_a}\n}\n\n\nfunction initialize_visited(row_count, col_count) {\n\tvar visited = new Array(row_count)\n\tfor (let i = 0; i < row_count; i++) {\n\t\tvisited[i] = new Array(col_count).fill(0)\n\t}\n\treturn visited\n}\n"]},"metadata":{},"sourceType":"module"}