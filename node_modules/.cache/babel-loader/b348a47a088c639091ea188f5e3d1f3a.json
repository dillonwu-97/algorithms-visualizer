{"ast":null,"code":"import React from 'react';\nimport { backtrack, initialize_visited } from './general';\nimport '../../setup/global';\n\nvar heapq = require('heapq');\n\nexport default function dijkstra(start_i, start_j, end_i, end_j, walls) {\n  console.log(start_i, start_j);\n\n  var cmp = function (x, y) {\n    return x[0] < y[0];\n  };\n\n  let row_count = global.rc;\n  let col_count = global.cc;\n  let weight = 1; // this can change later\n\n  let q = []; // using push and shift\n  // visited, all are initialized to null \n  // console.log(start_i, start_j, end_i, end_j, row_count)\n  // heapq.push(heap, [-3, {a:1, b:2}], cmp);\n\n  let visited = initialize_visited(row_count, col_count);\n  heapq.push(q, [0, {\n    coord: [start_i, start_j],\n    count: 0,\n    prev: [start_i, start_j]\n  }], cmp);\n  let out_pre, out, distance;\n  let return_vals = []; // return the list of nodes that were visited in order\n\n  while (q.length != 0) {\n    out_pre = heapq.pop(q, cmp);\n    out = out_pre[1];\n    let out_i = out.coord[0];\n    let out_j = out.coord[1]; // console.log(walls)\n    // console.log(typeof([13,25]), typeof(walls[0]))\n\n    if (walls.includes([out_i, out_j].toString())) {\n      continue;\n    }\n\n    return_vals.push([out_i, out_j]);\n    visited[out_i][out_j] = out.prev; // appending in each direction\n\n    if (out_i == end_i && out_j == end_j) {\n      // console.log('astar count: ', out.count)\n      return_vals.push(backtrack(start_i, start_j, end_i, end_j, visited));\n      break;\n    } // console.log(out)\n\n\n    if (out_i > 0 && visited[out_i - 1][out_j] == 0) {\n      distance = out.count + weight; // 10 for uniform cost\n\n      heapq.push(q, [distance, {\n        coord: [out_i - 1, out_j],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i - 1][out_j] = 1; // to mark the node as in the process of being visited\n    }\n\n    if (out_j > 0 && visited[out_i][out_j - 1] == 0) {\n      distance = out.count + weight;\n      heapq.push(q, [distance, {\n        coord: [out_i, out_j - 1],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i][out_j - 1] = 1;\n    }\n\n    if (out_i < row_count - 1 && visited[out_i + 1][out_j] == 0) {\n      distance = out.count + weight;\n      heapq.push(q, [distance, {\n        coord: [out_i + 1, out_j],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i + 1][out_j] = 1;\n    }\n\n    if (out_j < col_count - 1 && visited[out_i][out_j + 1] == 0) {\n      distance = out.count + weight;\n      heapq.push(q, [distance, {\n        coord: [out_i, out_j + 1],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i][out_j + 1] = 1;\n    }\n  }\n\n  return return_vals; // return_vals[-1] is the backtrack array; everything before that is order of traversal\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/algorithms/path_algs/dijkstra.js"],"names":["React","backtrack","initialize_visited","heapq","require","dijkstra","start_i","start_j","end_i","end_j","walls","console","log","cmp","x","y","row_count","global","rc","col_count","cc","weight","q","visited","push","coord","count","prev","out_pre","out","distance","return_vals","length","pop","out_i","out_j","includes","toString"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { backtrack, initialize_visited } from './general'\nimport '../../setup/global'\nvar heapq = require('heapq')\n\n\nexport default function dijkstra(start_i, start_j, end_i, end_j, walls) {\n    console.log(start_i, start_j)\n    var cmp = function(x, y) {return x[0] < y[0];}\n\n    let row_count = global.rc\n    let col_count = global.cc\n    let weight = 1 // this can change later\n\n\tlet q = [] // using push and shift\n\t// visited, all are initialized to null \n    // console.log(start_i, start_j, end_i, end_j, row_count)\n    // heapq.push(heap, [-3, {a:1, b:2}], cmp);\n\n    let visited = initialize_visited(row_count, col_count);\n\theapq.push(q, [0, {coord: [start_i, start_j], count: 0, prev: [start_i, start_j]}], cmp )\n\tlet out_pre, out, distance; \n\tlet return_vals = []; // return the list of nodes that were visited in order\n\twhile(q.length != 0) {\n        out_pre = heapq.pop(q, cmp)\n        out = out_pre[1]\n\t\tlet out_i = out.coord[0]\n\t\tlet out_j = out.coord[1]\n\t\t// console.log(walls)\n\t\t// console.log(typeof([13,25]), typeof(walls[0]))\n\t\tif (walls.includes([out_i, out_j].toString())) {\n\t\t\tcontinue;\n\t\t}\n        return_vals.push([out_i, out_j])\n        visited[out_i][out_j] = out.prev\n        // appending in each direction\n\n\t\tif (out_i == end_i && out_j == end_j) {\n\t\t\t// console.log('astar count: ', out.count)\n\t\t\treturn_vals.push(backtrack(start_i, start_j, end_i, end_j, visited))\n\t\t\tbreak;\n\t\t}\n\t\t// console.log(out)\n\t\tif (out_i > 0 && visited[out_i-1][out_j] == 0) {\n            distance = out.count + weight // 10 for uniform cost\n\t\t\theapq.push(q, [distance, {coord:[out_i-1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i-1][out_j] = 1 // to mark the node as in the process of being visited\n\t\t}\n\t\tif (out_j > 0 && visited[out_i][out_j-1] == 0) {\n            distance = out.count + weight\n            heapq.push(q, [distance, {coord:[out_i, out_j-1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j-1] = 1\n\t\t}\n\t\tif (out_i < row_count-1 && visited[out_i+1][out_j] == 0) {\n            distance = out.count + weight\n\t\t\theapq.push(q, [distance, {coord:[out_i+1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i+1][out_j] = 1\n\t\t}\n\t\tif (out_j < col_count-1 && visited[out_i][out_j+1] == 0) {\n            distance = out.count + weight\n\t\t\theapq.push(q, [distance, {coord:[out_i, out_j+1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j+1] = 1\n\t\t}\n\t}\n\treturn return_vals // return_vals[-1] is the backtrack array; everything before that is order of traversal\n\n\n}\n"]},"metadata":{},"sourceType":"module"}