{"ast":null,"code":"/**\n * (c) 2014, Andrey Geonya\n * https://github.com/dstructjs/disjoint-set\n */\n(function () {\n  'use strict';\n\n  function disjointSet() {\n    return new DisjointSet();\n  }\n\n  var DisjointSet = function () {\n    this._reset();\n  };\n\n  DisjointSet.prototype = {\n    add: function (val) {\n      var id = this._isPrimitive(val) ? val : this._lastId;\n\n      if (typeof val._disjointSetId === 'undefined') {\n        val._disjointSetId = this._relations[id] = id;\n        this._objects[id] = val;\n        this._size[id] = 1;\n        this._lastId++;\n      }\n\n      return this;\n    },\n    find: function (val) {\n      var id = this._isPrimitive(val) ? val : val._disjointSetId;\n      return this._findById(id);\n    },\n    _findById: function (id) {\n      var rootId = id;\n\n      while (this._relations[rootId] !== rootId) {\n        rootId = this._relations[rootId];\n      }\n\n      return rootId;\n    },\n    connected: function (val1, val2) {\n      return this.find(val1) === this.find(val2) ? true : false;\n    },\n    union: function (val1, val2) {\n      var val1RootId = this.find(val1),\n          val2RootId = this.find(val2);\n\n      if (val1RootId === val2RootId) {\n        return this;\n      }\n\n      if (this._size[val1RootId] < this._size[val2RootId]) {\n        this._relations[val1RootId] = val2RootId;\n        this._size[val1RootId] += this._size[val2RootId];\n      } else {\n        this._relations[val2RootId] = val1RootId;\n        this._size[val2RootId] += this._size[val1RootId];\n      }\n\n      return this;\n    },\n    extract: function () {\n      var rootId,\n          resObj = {},\n          resArr = [];\n\n      for (var id in this._relations) {\n        rootId = this._findById(id);\n\n        if (typeof resObj[rootId] === 'undefined') {\n          resObj[rootId] = [];\n        }\n\n        resObj[rootId].push(this._objects[id]);\n      }\n\n      for (var key1 in resObj) {\n        resArr.push(resObj[key1]);\n      }\n\n      return resArr;\n    },\n    destroy: function () {\n      this._reset();\n    },\n    _isPrimitive: function (val) {\n      if (typeof this.IS_PRIMITIVE !== 'undefined') {\n        return this.IS_PRIMITIVE;\n      } else {\n        this.IS_PRIMITIVE = DisjointSet._isPrimitive(val);\n        return this.IS_PRIMITIVE;\n      }\n    },\n    _reset: function () {\n      for (var id in this._objects) {\n        delete this._objects[id]._disjointSetId;\n      }\n\n      this._objects = {};\n      this._relations = {};\n      this._size = {};\n      this._lastId = 0;\n    }\n  };\n\n  DisjointSet._isPrimitive = function (val) {\n    if (Object.prototype.toString.call(val) === '[object String]' || Object.prototype.toString.call(val) === '[object Number]') {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return disjointSet;\n    });\n  } else if (typeof module !== 'undefined') {\n    module.exports = disjointSet;\n  } else if (typeof self !== 'undefined') {\n    self.disjointSet = disjointSet;\n  } else {\n    window.disjointSet = disjointSet;\n  }\n})();","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/node_modules/disjoint-set/src/DisjointSet.js"],"names":["disjointSet","DisjointSet","_reset","prototype","add","val","id","_isPrimitive","_lastId","_disjointSetId","_relations","_objects","_size","find","_findById","rootId","connected","val1","val2","union","val1RootId","val2RootId","extract","resObj","resArr","push","key1","destroy","IS_PRIMITIVE","Object","toString","call","define","amd","module","exports","self","window"],"mappings":"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","sourcesContent":["/**\n * (c) 2014, Andrey Geonya\n * https://github.com/dstructjs/disjoint-set\n */\n\n(function () { 'use strict';\n\nfunction disjointSet() {\n    return new DisjointSet();\n}\n\nvar DisjointSet = function() {\n    this._reset();\n};\n\nDisjointSet.prototype = {\n    add: function (val) {\n        var id = this._isPrimitive(val) ? val : this._lastId;\n        if (typeof val._disjointSetId === 'undefined') {\n            val._disjointSetId = this._relations[id] = id;\n            this._objects[id] = val;\n            this._size[id] = 1;\n            this._lastId++;\n        }\n        return this;\n    },\n\n    find: function (val) {\n        var id = this._isPrimitive(val) ? val : val._disjointSetId;\n        return this._findById(id);\n    },\n\n    _findById: function (id) {\n        var rootId = id;\n        while (this._relations[rootId] !== rootId) {\n            rootId = this._relations[rootId];\n        }\n        return rootId;\n    },\n\n    connected: function (val1, val2) {\n        return this.find(val1) === this.find(val2) ? true : false;\n    },\n\n    union: function (val1, val2) {\n        var val1RootId = this.find(val1),\n            val2RootId = this.find(val2);\n\n        if (val1RootId === val2RootId) { return this; }\n\n        if (this._size[val1RootId] < this._size[val2RootId]) {\n            this._relations[val1RootId] = val2RootId;\n            this._size[val1RootId] += this._size[val2RootId];\n        }\n        else {\n            this._relations[val2RootId] = val1RootId;\n            this._size[val2RootId] += this._size[val1RootId];\n        }\n\n        return this;\n    },\n\n    extract: function () {\n        var rootId,\n            resObj = {},\n            resArr = [];\n\n        for (var id in this._relations) {\n            rootId = this._findById(id);\n\n            if (typeof resObj[rootId] === 'undefined') {\n                resObj[rootId] = [];\n            }\n            resObj[rootId].push(this._objects[id]);\n        }\n\n        for (var key1 in resObj) {\n            resArr.push(resObj[key1]);\n        }\n\n        return resArr;\n    },\n\n    destroy: function () {\n        this._reset();\n    },\n\n    _isPrimitive: function (val) {\n        if (typeof this.IS_PRIMITIVE !== 'undefined') {\n            return this.IS_PRIMITIVE;\n        }\n        else {\n            this.IS_PRIMITIVE = DisjointSet._isPrimitive(val);\n            return this.IS_PRIMITIVE;\n        }\n    },\n\n    _reset: function () {\n        for (var id in this._objects) {\n            delete this._objects[id]._disjointSetId;\n        }\n        this._objects = {};\n        this._relations = {};\n        this._size = {};\n        this._lastId = 0;\n    }\n};\n\nDisjointSet._isPrimitive = function (val) {\n    if (Object.prototype.toString.call(val) === '[object String]' ||\n        Object.prototype.toString.call(val) === '[object Number]') {\n        return true;\n    }\n    else {\n        return false;\n    }\n};\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return disjointSet;\n    });\n} else if (typeof module !== 'undefined') {\n    module.exports = disjointSet;\n} else if (typeof self !== 'undefined') {\n    self.disjointSet = disjointSet;\n} else {\n    window.disjointSet = disjointSet;\n}\n\n})();"]},"metadata":{},"sourceType":"script"}