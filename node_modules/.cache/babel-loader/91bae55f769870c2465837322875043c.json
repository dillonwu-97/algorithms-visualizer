{"ast":null,"code":"import React from 'react';\nimport { backtrack, initialize_visited } from './general';\nimport '../../setup/global';\n\nvar heapq = require('heapq');\n\nexport default function greedy(start_i, start_j, end_i, end_j, walls) {\n  var cmp = function (x, y) {\n    return x[0] < y[0];\n  };\n\n  let row_count = global.rc;\n  let col_count = global.cc;\n  let q = []; // using push and shift\n  // visited, all are initialized to null \n  // console.log(start_i, start_j, end_i, end_j, row_count)\n  // heapq.push(heap, [-3, {a:1, b:2}], cmp);\n\n  let visited = initialize_visited(row_count, col_count);\n  heapq.push(q, [0, {\n    coord: [start_i, start_j],\n    count: 0,\n    prev: [start_i, start_j]\n  }], cmp);\n  let out_pre, out, distance;\n  let return_vals = []; // return the list of nodes that were visited in order\n\n  while (q.length != 0) {\n    out_pre = heapq.pop(q, cmp);\n    out = out_pre[1];\n    let out_i = out.coord[0];\n    let out_j = out.coord[1]; // console.log(walls)\n    // console.log(typeof([13,25]), typeof(walls[0]))\n\n    if (walls.includes([out_i, out_j].toString())) {\n      continue;\n    }\n\n    return_vals.push([out_i, out_j]); // appending in each direction\n\n    visited[out_i][out_j] = out.prev;\n\n    if (out_i == end_i && out_j == end_j) {\n      // console.log('greedy count: ', out.count)\n      return_vals.push(backtrack(start_i, start_j, end_i, end_j, visited));\n      break;\n    } // console.log(out)\n\n\n    if (out_i > 0 && visited[out_i - 1][out_j] == 0) {\n      distance = manhattan(end_i, out_i - 1, end_j, out_j); // 10 for uniform cost\n\n      heapq.push(q, [distance, {\n        coord: [out_i - 1, out_j],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i - 1][out_j] = 1; // to mark the node as in the process of being visited\n    }\n\n    if (out_j > 0 && visited[out_i][out_j - 1] == 0) {\n      distance = manhattan(end_i, out_i, end_j, out_j - 1);\n      heapq.push(q, [distance, {\n        coord: [out_i, out_j - 1],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i][out_j - 1] = 1;\n    }\n\n    if (out_i < row_count - 1 && visited[out_i + 1][out_j] == 0) {\n      distance = manhattan(end_i, out_i + 1, end_j, out_j);\n      heapq.push(q, [distance, {\n        coord: [out_i + 1, out_j],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i + 1][out_j] = 1;\n    }\n\n    if (out_j < col_count - 1 && visited[out_i][out_j + 1] == 0) {\n      distance = manhattan(end_i, out_i, end_j, out_j + 1);\n      heapq.push(q, [distance, {\n        coord: [out_i, out_j + 1],\n        count: out.count + 1,\n        prev: out.coord\n      }], cmp);\n      visited[out_i][out_j + 1] = 1;\n    }\n  }\n\n  return return_vals; // return_vals[-1] is the backtrack array; everything before that is order of traversal\n}\n\nfunction manhattan(x1, x2, y1, y2) {\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2);\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/algorithms/path_algs/greedy.js"],"names":["React","backtrack","initialize_visited","heapq","require","greedy","start_i","start_j","end_i","end_j","walls","cmp","x","y","row_count","global","rc","col_count","cc","q","visited","push","coord","count","prev","out_pre","out","distance","return_vals","length","pop","out_i","out_j","includes","toString","manhattan","x1","x2","y1","y2","Math","abs"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { backtrack, initialize_visited } from './general'\nimport '../../setup/global'\nvar heapq = require('heapq')\n\n\nexport default function greedy(start_i, start_j, end_i, end_j, walls) {\n\n    var cmp = function(x, y) {return x[0] < y[0];}\n\n    let row_count = global.rc\n    let col_count = global.cc\n\n\tlet q = [] // using push and shift\n\t// visited, all are initialized to null \n    // console.log(start_i, start_j, end_i, end_j, row_count)\n    // heapq.push(heap, [-3, {a:1, b:2}], cmp);\n\n\tlet visited = initialize_visited(row_count, col_count);\n\theapq.push(q, [0, {coord: [start_i, start_j], count: 0, prev: [start_i, start_j]}], cmp )\n\tlet out_pre, out, distance; \n\tlet return_vals = []; // return the list of nodes that were visited in order\n\twhile(q.length != 0) {\n        out_pre = heapq.pop(q, cmp)\n        out = out_pre[1]\n\t\tlet out_i = out.coord[0]\n\t\tlet out_j = out.coord[1]\n\t\t// console.log(walls)\n\t\t// console.log(typeof([13,25]), typeof(walls[0]))\n\t\tif (walls.includes([out_i, out_j].toString())) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn_vals.push([out_i, out_j])\n\t\t// appending in each direction\n\t\tvisited[out_i][out_j] = out.prev\n\t\tif (out_i == end_i && out_j == end_j) {\n\t\t\t// console.log('greedy count: ', out.count)\n\t\t\treturn_vals.push(backtrack(start_i, start_j, end_i, end_j, visited))\n\t\t\tbreak;\n\t\t}\n\t\t// console.log(out)\n\t\tif (out_i > 0 && visited[out_i-1][out_j] == 0) {\n            distance = (manhattan(end_i, out_i-1, end_j, out_j)) // 10 for uniform cost\n\t\t\theapq.push(q, [distance, {coord:[out_i-1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i-1][out_j] = 1 // to mark the node as in the process of being visited\n\t\t}\n\t\tif (out_j > 0 && visited[out_i][out_j-1] == 0) {\n            distance = (manhattan(end_i, out_i, end_j, out_j-1))\n            heapq.push(q, [distance, {coord:[out_i, out_j-1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j-1] = 1\n\t\t}\n\t\tif (out_i < row_count-1 && visited[out_i+1][out_j] == 0) {\n            distance = (manhattan(end_i, out_i+1, end_j, out_j))\n\t\t\theapq.push(q, [distance, {coord:[out_i+1, out_j], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i+1][out_j] = 1\n\t\t}\n\t\tif (out_j < col_count-1 && visited[out_i][out_j+1] == 0) {\n            distance = (manhattan(end_i, out_i, end_j, out_j+1))\n\t\t\theapq.push(q, [distance, {coord:[out_i, out_j+1], count: out.count+1, prev:out.coord}], cmp)\n\t\t\tvisited [out_i][out_j+1] = 1\n\t\t}\n\t}\n\treturn return_vals // return_vals[-1] is the backtrack array; everything before that is order of traversal\n\n\n}\n\nfunction manhattan(x1, x2, y1, y2) {\n    return Math.abs(x1-x2) + Math.abs(y1-y2)\n}"]},"metadata":{},"sourceType":"module"}