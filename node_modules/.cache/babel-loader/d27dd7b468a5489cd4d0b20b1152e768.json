{"ast":null,"code":"var _jsxFileName = \"/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/sudoku_setup/sudoku_grid.js\";\nimport React, { Component } from 'react';\nimport './sudoku_cell.css';\nimport backtrack_bruteforce from './sudoku_algorithms/backtrack_bruteforce';\nimport { Button } from 'react-bootstrap';\nimport './sudoku_global';\nimport backtrack_smart from './sudoku_algorithms/backtrack_smart';\nlet table_size = [...Array(9).keys()];\n/****************************** Creating the sudoku configuration ******************************/\n\nfunction create_table() {\n  var table = new Array(9);\n\n  for (let i = 0; i < 9; i++) {\n    table[i] = new Array(9).fill(0);\n  }\n\n  return table;\n} // this variable is used to clear timeouts \n\n\nglobal.vis; // TODO:\n// Create a backtrack counter\n\n/****************************** Class method ******************************/\n\nexport default class Sudoku_grid extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      board: [[0, 0, 5, 3, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 2, 0], [0, 7, 0, 0, 1, 0, 5, 0, 0], [4, 0, 0, 0, 0, 5, 3, 0, 0], [0, 1, 0, 0, 7, 0, 0, 0, 6], [0, 0, 3, 2, 0, 0, 0, 8, 0], [0, 6, 0, 5, 0, 0, 0, 0, 9], [0, 0, 4, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 9, 7, 0, 0]]\n    };\n    this.solve_puzzle = this.solve_puzzle.bind(this);\n    this.visualize_puzzle = this.visualize_puzzle.bind(this);\n    this.resetboard = this.resetboard.bind(this);\n  }\n  /****************************** Solving the sudoku configuration ******************************/\n\n\n  visualize_puzzle(type) {\n    let grid = this.state.board;\n    let str;\n    global.values = []; // resetting the global variable\n\n    switch (type) {\n      case \"bruteforce\":\n        backtrack_bruteforce(grid);\n        break;\n\n      case \"smart\":\n        backtrack_smart(grid);\n        break;\n    }\n\n    for (let i = 0; i < global.values.length; i++) {\n      // console.log(str, document.getElementById(str).innerHTML)\n      // console.log(document.getElementById(str).innerHTML)\n      vis = setTimeout(() => {\n        str = 'sudoku-' + global.values[i][0] + '-' + global.values[i][1];\n\n        if (global.values[i][2] == 0) {\n          document.getElementById(str).innerHTML = ' ';\n        } else {\n          document.getElementById(str).innerHTML = global.values[i][2];\n        }\n      }, 10 * i);\n    } // this.setState({\n    //     board:grid\n    // })\n\n  }\n\n  solve_puzzle(type) {\n    let grid = this.state.board;\n    global.values = [];\n\n    switch (type) {\n      case \"bruteforce\":\n        backtrack_bruteforce(grid);\n        break;\n\n      case \"smart\":\n        backtrack_smart(grid);\n        break;\n    }\n\n    console.log(global.backtrack_count);\n    this.setState({\n      board: grid\n    });\n  }\n  /****************************** Board Updates ******************************/\n\n\n  resetboard() {\n    console.log(vis);\n    clearTimeout(vis);\n  }\n  /****************************** Render method ******************************/\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, this.state.board.map((row, idx) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 33\n        }\n      }, row.map((unit, idy) => {\n        {\n          if (unit == 0) {\n            return /*#__PURE__*/React.createElement(\"td\", {\n              id: 'sudoku-' + idx + '-' + idy,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 45\n              }\n            }, console.log('sudoku-' + idx + '-' + idy), /*#__PURE__*/React.createElement(\"input\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 49\n              }\n            }));\n          } else {\n            return /*#__PURE__*/React.createElement(\"td\", {\n              id: 'sudoku-' + idx + '-' + idy,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 45\n              }\n            }, unit);\n          }\n        } // return (\n        // <td>\n        //     {j}\n        // </td>\n        // )\n      }));\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, \"Visualize\", /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"sudoku-solve-button\",\n      onClick: () => this.visualize_puzzle(\"bruteforce\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }\n    }, \"Brute Force\"), \"Instant\", /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"sudoku-solve-button\",\n      onClick: () => this.solve_puzzle(\"bruteforce\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, \"Brute Force\"), \"Visualize\", /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"sudoku-solve-button\",\n      onClick: () => this.visualize_puzzle(\"smart\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    }, \"Smart Brute Force\"), \"Instant\", /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"sudoku-solve-button\",\n      onClick: () => this.solve_puzzle(\"smart\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    }, \"Smart Brute Force\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.resetboard(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, \"Reset Board\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/sudoku_setup/sudoku_grid.js"],"names":["React","Component","backtrack_bruteforce","Button","backtrack_smart","table_size","Array","keys","create_table","table","i","fill","global","vis","Sudoku_grid","constructor","props","state","board","solve_puzzle","bind","visualize_puzzle","resetboard","type","grid","str","values","length","setTimeout","document","getElementById","innerHTML","console","log","backtrack_count","setState","clearTimeout","render","map","row","idx","unit","idy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './sudoku_cell.css'\nimport backtrack_bruteforce from './sudoku_algorithms/backtrack_bruteforce'\nimport { Button } from 'react-bootstrap'\nimport './sudoku_global'\nimport backtrack_smart from './sudoku_algorithms/backtrack_smart'\n\nlet table_size = [...Array(9).keys()]\n/****************************** Creating the sudoku configuration ******************************/\n\nfunction create_table() {\n\tvar table = new Array(9)\n\tfor (let i = 0; i < 9; i++) {\n\t\ttable[i] = new Array(9).fill(0)\n\t}\n    return table\n    \n}\n\n// this variable is used to clear timeouts \nglobal.vis;\n\n// TODO:\n// Create a backtrack counter\n\n\n\n/****************************** Class method ******************************/\n\nexport default class Sudoku_grid extends Component {\n\n    constructor(props) {\n        super()\n        this.state = {\n            board: [[0,0,5,3,0,0,0,0,0],\n            [8,0,0,0,0,0,0,2,0],\n            [0,7,0,0,1,0,5,0,0],\n            [4,0,0,0,0,5,3,0,0],\n            [0,1,0,0,7,0,0,0,6],\n            [0,0,3,2,0,0,0,8,0],\n            [0,6,0,5,0,0,0,0,9],\n            [0,0,4,0,0,0,0,3,0],\n            [0,0,0,0,0,9,7,0,0]]\n        }\n        this.solve_puzzle = this.solve_puzzle.bind(this)\n        this.visualize_puzzle = this.visualize_puzzle.bind(this)\n        this.resetboard = this.resetboard.bind(this)\n    }\n\n/****************************** Solving the sudoku configuration ******************************/\n    visualize_puzzle(type) {\n        let grid = this.state.board\n        let str\n        global.values = [] // resetting the global variable\n        switch(type) {\n            case \"bruteforce\":\n                backtrack_bruteforce(grid)\n                break\n            case \"smart\":\n                backtrack_smart(grid)\n                break        \n        }\n        for (let i = 0; i < global.values.length; i++) {\n            // console.log(str, document.getElementById(str).innerHTML)\n            // console.log(document.getElementById(str).innerHTML)\n            vis = setTimeout(()=>{\n                str = 'sudoku-' + global.values[i][0] + '-' + global.values[i][1]\n                if (global.values[i][2] == 0) {\n                    document.getElementById(str).innerHTML = ' '\n                } else {\n                    document.getElementById(str).innerHTML = global.values[i][2]\n                }\n            }, 10*i)\n        }\n        // this.setState({\n        //     board:grid\n        // })\n    }\n    \n    solve_puzzle(type) {\n        let grid = this.state.board\n        global.values = []\n        switch(type) {\n            case \"bruteforce\":\n                backtrack_bruteforce(grid)\n                break\n            case \"smart\":\n                backtrack_smart(grid)\n                break        \n        }\n        console.log(global.backtrack_count)\n        this.setState({\n            board:grid\n        })\n    }\n\n/****************************** Board Updates ******************************/\n    resetboard() {\n        console.log(vis)\n        clearTimeout(vis);\n    }\n\n\n/****************************** Render method ******************************/\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <table>\n                        {/* {console.log(this.state.board)} */}\n                        {this.state.board.map((row, idx) => {\n                            return(\n                                <tr>\n                                    {row.map((unit, idy) => {\n                                        {if (unit == 0) {\n                                            return (\n                                            <td id = {'sudoku-'+idx+'-'+idy}>\n                                                {console.log('sudoku-'+idx+'-'+idy)}\n                                                <input>\n                                                </input>\n                                            </td>\n                                            )\n                                        } else {\n                                            return (\n                                            <td id = {'sudoku-'+idx+'-'+idy}>\n                                                {unit}\n                                            </td>\n                                            )\n                                        }}\n                                        // return (\n                                        // <td>\n                                        //     {j}\n                                        // </td>\n                                    // )\n                                    })}\n                                </tr>\n                            )\n                        })}\n                    </table>\n                </div> \n                <div className = \"button-div\">\n                    Visualize\n                    <button type=\"button\" className=\"sudoku-solve-button\" onClick={()=>this.visualize_puzzle(\"bruteforce\")}>\n                        Brute Force\n                    </button>\n                    Instant \n                    <button type=\"button\" className=\"sudoku-solve-button\" onClick={()=>this.solve_puzzle(\"bruteforce\")}>\n                        Brute Force\n                    </button> \n                    Visualize\n                    <button type=\"button\" className=\"sudoku-solve-button\" onClick={()=>this.visualize_puzzle(\"smart\")}>\n                        Smart Brute Force\n                    </button>\n                    Instant \n                    <button type=\"button\" className=\"sudoku-solve-button\" onClick={()=>this.solve_puzzle(\"smart\")}>\n                        Smart Brute Force\n                    </button> \n                    <button type=\"button\" onClick={()=>this.resetboard()}>\n                        Reset Board\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}