{"ast":null,"code":"import React from 'react';\nimport '../../setup/global'; // global.rc = 19\n// global.cc = 19\n// random_prims()\n\n/*\nStart with a grid full of walls.\nPick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.\nWhile there are walls in the list:\nPick a random wall from the list. If only one of the two cells that the wall divides is visited, then:\nMake the wall a passage and mark the unvisited cell as part of the maze.\nAdd the neighboring walls of the cell to the wall list.\nRemove the wall from the list.\n*/\n\nexport default function random_prims() {\n  // create setup to check adjacencies\n  let visited = initialize_visited(global.rc, global.cc);\n  let walls = initialize_visited(global.rc, global.cc); // randomize array\n\n  let maze = [];\n\n  for (let i = 1; i < global.rc - 1; i++) {\n    for (let j = 1; j < global.cc - 1; j++) {\n      if (j % 2 == 1 && i % 2 == 1) {\n        walls[i][j] = 0;\n      } else {\n        walls[i][j] = 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < global.cc; i++) {\n    walls[0][i] = 1;\n    walls[global.rc - 1][i] = 1;\n  }\n\n  for (let i = 0; i < global.rc; i++) {\n    walls[i][0] = 1;\n    walls[i][global.cc - 1] = 1;\n  } // for (let i = 0; i < global.rc; i++) {\n  //     console.log(walls[i].toString())\n  //     // console.log('\\n')\n  // }\n  // picking a random point and marking it as part of the maze\n  // 31 rows, 51 columns; 2n+1 formula so random starts at 29-1 // 14 = 15, 49-1//2 = 24; +1 to avoid edges\n\n\n  let in_wall_list = initialize_visited(global.rc, global.cc);\n  let rand_i = 2 * Math.floor(Math.random() * Math.floor((global.rc - 1) / 2)) + 1;\n  let rand_j = 2 * Math.floor(Math.random() * Math.floor((global.cc - 1) / 2)) + 1;\n  console.log(rand_i, \" \", rand_j); // in_wall_list[rand_i][rand_j] = 1\n\n  visited[rand_i][rand_j] = 1;\n  let rand_int, out, x, y, ret_val;\n  let wall_list = [];\n  in_wall_list[rand_i + 1][rand_j] = 1;\n  in_wall_list[rand_i - 1][rand_j] = 1;\n  in_wall_list[rand_i][rand_j + 1] = 1;\n  in_wall_list[rand_i][rand_j - 1] = 1;\n  wall_list.push([rand_i + 1, rand_j], [rand_i - 1, rand_j], [rand_i, rand_j + 1], [rand_i, rand_j - 1]);\n  maze.push([rand_i, rand_j]);\n\n  while (wall_list.length > 0) {\n    // console.log(wall_list.length, wall_list)\n    rand_int = Math.floor(Math.random() * Math.floor(wall_list.length));\n    out = wall_list.splice(rand_int, 1)[0];\n    x = out[0];\n    y = out[1];\n    console.log(\"rand num \", rand_int, ' x ', x, ' y ', y);\n\n    if (x == 0 || y == 0 || x == global.rc - 1 || y == global.cc - 1) {\n      continue;\n    } // if one of the two spaces are visited\n\n\n    if (visited[x + 1][y] == 0 && visited[x - 1][y] == 1 || visited[x + 1][y] == 1 && visited[x - 1][y] == 0) {\n      // append walls adjacent to the new cell\n      maze.push([x, y]);\n\n      if (visited[x + 1][y] == 0) {\n        ret_val = append_adj(wall_list, x + 1, y, in_wall_list, walls);\n        visited[x + 1][y] = 1;\n        maze.push([x + 1, y]);\n      } else if (visited[x - 1][y] == 0) {\n        ret_val = append_adj(wall_list, x - 1, y, in_wall_list, walls);\n        visited[x - 1][y] = 1;\n        maze.push([x - 1, y]);\n      }\n\n      wall_list = ret_val.a;\n      in_wall_list = ret_val.in_a;\n      walls[x][y] = 0;\n      visited[x][y] = 1;\n    } else if (visited[x][y + 1] == 0 && visited[x][y - 1] == 1 || visited[x][y + 1] == 1 && visited[x][y - 1] == 0) {\n      maze.push([x, y]);\n\n      if (visited[x][y + 1] == 0) {\n        ret_val = append_adj(wall_list, x, y + 1, in_wall_list, walls);\n        visited[x][y + 1] = 1;\n        maze.push([x, y + 1]);\n      } else if (visited[x][y - 1] == 0) {\n        ret_val = append_adj(wall_list, x, y - 1, in_wall_list, walls);\n        visited[x][y - 1] = 1;\n        maze.push([x, y - 1]);\n      }\n\n      wall_list = ret_val.a;\n      in_wall_list = ret_val.in_a;\n      walls[x][y] = 0;\n      visited[x][y] = 1;\n    }\n  }\n\n  for (let i = 0; i < global.rc; i++) {\n    console.log(walls[i].toString()); // console.log('\\n')\n  } // console.log(set.extract())\n\n\n  let ret_walls = [];\n\n  for (let i = 0; i < walls.length; i++) {\n    for (let j = 0; j < walls[0].length; j++) {\n      if (walls[i][j] == 1) {\n        ret_walls.push([i, j]);\n      }\n    }\n  } // // console.log(maze)\n  // // console.log( {\"maze\": maze, \"walls\": ret_walls})\n\n\n  return {\n    \"maze\": maze,\n    \"walls\": ret_walls\n  };\n}\n\nfunction append_adj(a, row, col, in_a, walls) {\n  console.log(\"before \", a, \" \", row, \" \", col);\n\n  for (let i = -1; i <= 1; i += 2) {\n    if (walls[row + i][col] == 1 && in_a[row + i][col] == 0) {\n      a.push([row + i, col]);\n      in_a[row + i][col] = 1;\n    }\n\n    if (walls[row][col + i] == 1 && in_a[row][col + i] == 0) {\n      a.push([row, col + i]);\n      in_a[row][col + i] = 1;\n    }\n  }\n\n  console.log(\"after \", a);\n  return {\n    \"a\": a,\n    \"in_a\": in_a\n  };\n}\n\nfunction initialize_visited(row_count, col_count) {\n  var visited = new Array(row_count);\n\n  for (let i = 0; i < row_count; i++) {\n    visited[i] = new Array(col_count).fill(0);\n  }\n\n  return visited;\n}","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/pathfinder/algorithms/maze_algs/random_prims.js"],"names":["React","random_prims","visited","initialize_visited","global","rc","cc","walls","maze","i","j","in_wall_list","rand_i","Math","floor","random","rand_j","console","log","rand_int","out","x","y","ret_val","wall_list","push","length","splice","append_adj","a","in_a","toString","ret_walls","row","col","row_count","col_count","Array","fill"],"mappings":"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","sourcesContent":["import React from 'react'\nimport '../../setup/global'\n\n// global.rc = 19\n// global.cc = 19\n// random_prims()\n/*\nStart with a grid full of walls.\nPick a cell, mark it as part of the maze. Add the walls of the cell to the wall list.\nWhile there are walls in the list:\nPick a random wall from the list. If only one of the two cells that the wall divides is visited, then:\nMake the wall a passage and mark the unvisited cell as part of the maze.\nAdd the neighboring walls of the cell to the wall list.\nRemove the wall from the list.\n*/\nexport default function random_prims() {\n    // create setup to check adjacencies\n    let visited = initialize_visited(global.rc, global.cc);\n    let walls = initialize_visited(global.rc, global.cc)\n\n    // randomize array\n    let maze = []\n    for (let i = 1; i < global.rc-1; i++) {\n        for (let j = 1; j < global.cc-1; j++) {\n            if (j % 2 == 1 && i % 2 == 1) {\n                walls[i][j] = 0\n            } else {\n                walls[i][j] = 1\n            }\n        }\n    }\n    for (let i = 0; i < global.cc; i++) {\n        walls[0][i] = 1\n        walls[global.rc-1][i] = 1\n    }\n    for (let i = 0; i < global.rc; i++) {\n        walls[i][0] = 1\n        walls[i][global.cc-1] = 1\n    }\n    // for (let i = 0; i < global.rc; i++) {\n    //     console.log(walls[i].toString())\n    //     // console.log('\\n')\n    // }\n    \n    // picking a random point and marking it as part of the maze\n    // 31 rows, 51 columns; 2n+1 formula so random starts at 29-1 // 14 = 15, 49-1//2 = 24; +1 to avoid edges\n    let in_wall_list = initialize_visited(global.rc, global.cc)\n    let rand_i = 2 * Math.floor(Math.random() * Math.floor( (global.rc-1) /2)) + 1\n    let rand_j = 2 * Math.floor(Math.random() * Math.floor( (global.cc-1) / 2)) + 1\n    console.log(rand_i, \" \", rand_j)\n    // in_wall_list[rand_i][rand_j] = 1\n    visited[rand_i][rand_j]=1\n    let rand_int, out, x, y, ret_val\n    let wall_list = []\n    in_wall_list[rand_i+1][rand_j] = 1\n    in_wall_list[rand_i-1][rand_j] = 1\n    in_wall_list[rand_i][rand_j+1] = 1\n    in_wall_list[rand_i][rand_j-1] = 1\n    wall_list.push([rand_i+1, rand_j], [rand_i-1, rand_j], [rand_i, rand_j+1], [rand_i, rand_j-1])\n    maze.push([rand_i, rand_j])\n    while (wall_list.length > 0) {\n        // console.log(wall_list.length, wall_list)\n        rand_int = Math.floor(Math.random() * Math.floor(wall_list.length))\n        out = wall_list.splice(rand_int,1)[0]\n        x = out[0]\n        y = out[1]\n        console.log(\"rand num \", rand_int, ' x ', x, ' y ', y)\n        if (x == 0 || y == 0 || x == global.rc-1 || y == global.cc -1) {\n            continue\n        }\n        // if one of the two spaces are visited\n        if (visited[x+1][y] == 0 && visited[x-1][y] == 1 || visited[x+1][y] == 1 && visited[x-1][y] == 0){\n            // append walls adjacent to the new cell\n            maze.push([x,y])\n            if (visited[x+1][y] == 0) {\n                ret_val = append_adj(wall_list, x+1,y, in_wall_list, walls)\n                visited[x+1][y] = 1\n                maze.push([x+1,y])\n            } else if (visited[x-1][y] == 0) {\n                ret_val = append_adj(wall_list, x-1,y, in_wall_list, walls)\n                visited[x-1][y] = 1\n                maze.push([x-1,y])\n            }\n            wall_list = ret_val.a \n            in_wall_list = ret_val.in_a\n            walls[x][y] = 0\n            visited[x][y] = 1\n            \n        } else if (visited[x][y+1] == 0 && visited[x][y-1] == 1 || visited[x][y+1] == 1 && visited[x][y-1] == 0) {\n            maze.push([x,y])\n            if (visited[x][y+1] == 0) {\n                ret_val = append_adj(wall_list, x,y+1, in_wall_list, walls)\n                visited[x][y+1] = 1\n                maze.push([x,y+1])\n            } else if (visited[x][y-1] == 0) {\n                ret_val = append_adj(wall_list, x,y-1, in_wall_list, walls)\n                visited[x][y-1] = 1\n                maze.push([x,y-1])\n            }\n            wall_list = ret_val.a \n            in_wall_list= ret_val.in_a\n            walls[x][y] = 0\n            visited[x][y] = 1\n        }\n\n    }\n    \n    for (let i = 0; i < global.rc; i++) {\n        console.log(walls[i].toString())\n        // console.log('\\n')\n    }\n\n\n    // console.log(set.extract())\n    let ret_walls = []\n    for (let i = 0; i < walls.length; i++) {\n        for (let j = 0; j < walls[0].length; j++) {\n            if (walls[i][j] == 1) {\n                ret_walls.push([i,j])\n            }\n        }\n    }\n\n    // // console.log(maze)\n    // // console.log( {\"maze\": maze, \"walls\": ret_walls})\n    return {\"maze\": maze, \"walls\": ret_walls}\n    \n}\n\n\nfunction append_adj(a,row,col, in_a, walls) {\n    console.log(\"before \", a, \" \", row, \" \", col)\n    for (let i = -1; i <=1; i+=2) {\n        if (walls[row+i][col] == 1 && in_a[row+i][col] == 0) {\n            a.push([row+i,col])\n            in_a[row+i][col] = 1\n\n        }\n        if (walls[row][col+i] == 1 && in_a[row][col+i]==0) {\n            a.push([row,col+i])\n            in_a[row][col+i] = 1\n        }\n    }\n    console.log(\"after \", a)\n    \n    return {\"a\": a, \"in_a\":in_a}\n}\n\n\nfunction initialize_visited(row_count, col_count) {\n\tvar visited = new Array(row_count)\n\tfor (let i = 0; i < row_count; i++) {\n\t\tvisited[i] = new Array(col_count).fill(0)\n\t}\n\treturn visited\n}\n"]},"metadata":{},"sourceType":"module"}