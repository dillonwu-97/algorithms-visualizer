{"ast":null,"code":"import React from 'react';\n\nfunction find_next_cell(grid) {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (grid[i][j] == 0) {\n        return [i, j];\n      }\n    }\n  }\n\n  return [-1, -1];\n}\n\nfunction is_valid(grid, row, col, e) {\n  // check rows\n  for (let i = 0; i < 9; i++) {\n    if (grid[row][i] == e) {\n      return false;\n    }\n  } // check columns\n\n\n  for (let i = 0; i < 9; i++) {\n    if (grid[i][col] == e) {\n      return false;\n    }\n  } // check square\n\n\n  let top_x = 3 * Math.floor(row / 3); // works since 0 <= row < 9\n\n  let top_y = 3 * Math.floor(col / 3);\n\n  for (let i = top_x; i < top_x + 3; i++) {\n    for (let j = top_y; j < top_y + 3; j++) {\n      if (grid[i][j] == e) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport { find_next_cell, is_valid };","map":{"version":3,"sources":["/Users/Kvothe/Desktop/git/algorithms-visualizer/algorithms-visualizer/src/sudoku/sudoku_algorithms/lib.js"],"names":["React","find_next_cell","grid","i","j","is_valid","row","col","e","top_x","Math","floor","top_y"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,SAAK,IAAIC,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,UAAIF,IAAI,CAACC,CAAD,CAAJ,CAAQC,CAAR,KAAc,CAAlB,EAAqB;AACjB,eAAO,CAACD,CAAD,EAAIC,CAAJ,CAAP;AACH;AACJ;AACJ;;AACD,SAAO,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAP;AACH;;AAED,SAASC,QAAT,CAAkBH,IAAlB,EAAwBI,GAAxB,EAA6BC,GAA7B,EAAkCC,CAAlC,EAAqC;AACjC;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAID,IAAI,CAACI,GAAD,CAAJ,CAAUH,CAAV,KAAgBK,CAApB,EAAuB;AACnB,aAAO,KAAP;AACH;AACJ,GANgC,CAOjC;;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,QAAID,IAAI,CAACC,CAAD,CAAJ,CAAQI,GAAR,KAAgBC,CAApB,EAAuB;AACnB,aAAO,KAAP;AACH;AACJ,GAZgC,CAajC;;;AACA,MAAIC,KAAK,GAAG,IAAIC,IAAI,CAACC,KAAL,CAAWL,GAAG,GAAG,CAAjB,CAAhB,CAdiC,CAcG;;AACpC,MAAIM,KAAK,GAAG,IAAIF,IAAI,CAACC,KAAL,CAAWJ,GAAG,GAAG,CAAjB,CAAhB;;AACA,OAAK,IAAIJ,CAAC,GAAGM,KAAb,EAAoBN,CAAC,GAAGM,KAAK,GAAC,CAA9B,EAAiCN,CAAC,EAAlC,EAAsC;AAClC,SAAK,IAAIC,CAAC,GAAGQ,KAAb,EAAoBR,CAAC,GAAGQ,KAAK,GAAG,CAAhC,EAAmCR,CAAC,EAApC,EAAwC;AACpC,UAAIF,IAAI,CAACC,CAAD,CAAJ,CAAQC,CAAR,KAAcI,CAAlB,EAAqB;AACjB,eAAO,KAAP;AACH;AACJ;AACJ;;AAED,SAAO,IAAP;AACH;;AACD,SAAQP,cAAR,EAAwBI,QAAxB","sourcesContent":["import React from 'react'\n\nfunction find_next_cell(grid) {\n    for (let i = 0; i < 9; i++) {\n        for (let j =0; j < 9; j++) {\n            if (grid[i][j] == 0) {\n                return [i, j]\n            }\n        }\n    }\n    return [-1, -1]\n}\n\nfunction is_valid(grid, row, col, e) {\n    // check rows\n    for (let i = 0; i < 9; i++) {\n        if (grid[row][i] == e) {\n            return false;\n        }\n    }\n    // check columns\n    for (let i = 0; i < 9; i++) {\n        if (grid[i][col] == e) {\n            return false;\n        }\n    }\n    // check square\n    let top_x = 3 * Math.floor(row / 3) // works since 0 <= row < 9\n    let top_y = 3 * Math.floor(col / 3)\n    for (let i = top_x; i < top_x+3; i++) {\n        for (let j = top_y; j < top_y + 3; j++) {\n            if (grid[i][j] == e) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\nexport {find_next_cell, is_valid}"]},"metadata":{},"sourceType":"module"}